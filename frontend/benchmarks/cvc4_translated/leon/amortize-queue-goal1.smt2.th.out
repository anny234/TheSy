Collecting statistics
(less zero zero) => false
(less zero (succ ?x)) => true
(less (succ ?x) (succ ?y)) => (less ?x ?y)
(less ?x ?y) => (less (succ ?x) (succ ?y))
(leq ?__x0 ?__y1) => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
(or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) => (leq ?__x0 ?__y1)
(plus zero ?n) => ?n
(plus (succ ?n) ?m) => (succ (plus ?n ?m))
(succ (plus ?n ?m)) => (plus (succ ?n) ?m)
(append nil ?x2) => ?x2
(append (cons ?x ?y3) ?z) => (cons ?x (append ?y3 ?z))
(cons ?x (append ?y3 ?z)) => (append (cons ?x ?y3) ?z)
(len nil) => zero
zero => (len nil)
(len (cons ?x ?y4)) => (succ (len ?y4))
(butlast nil) => nil
nil => (butlast nil)
(butlast (cons ?x ?y5)) => (ite (= ?y5 nil) nil (cons ?x (butlast ?y5)))
(ite (= ?y5 nil) nil (cons ?x (butlast ?y5))) => (butlast (cons ?x ?y5))
(qreva nil ?x6) => ?x6
(qreva (cons ?z9 ?x7) ?y8) => (qreva ?x7 (cons ?z9 ?y8))
(qreva ?x7 (cons ?z9 ?y8)) => (qreva (cons ?z9 ?x7) ?y8)
(qrev ?x10) => (qreva ?x10 nil)
(qreva ?x10 nil) => (qrev ?x10)
(queue-to-lst (queue ?x11 ?y12)) => (append ?x11 (qrev ?y12))
(append ?x11 (qrev ?y12)) => (queue-to-lst (queue ?x11 ?y12))
(qlen (queue ?x13 ?y14)) => (plus (len ?x13) (len ?y14))
(plus (len ?x13) (len ?y14)) => (qlen (queue ?x13 ?y14))
(isAmortized (queue ?x15 ?y16)) => (or (= (len ?y16) (len ?x15)) (less (len ?y16) (len ?x15)))
(or (= (len ?y16) (len ?x15)) (less (len ?y16) (len ?x15))) => (isAmortized (queue ?x15 ?y16))
(isEmpty (queue ?x17 ?y18)) => (and (= ?x17 nil) (= ?y18 nil))
(and (= ?x17 nil) (= ?y18 nil)) => (isEmpty (queue ?x17 ?y18))
(amortizeQueue ?x19 ?y20) => (ite (or (= (len ?y20) (len ?x19)) (less (len ?y20) (len ?x19))) (queue ?x19 ?y20) (queue (append ?x19 (qrev ?y20)) nil))
(ite (or (= (len ?y20) (len ?x19)) (less (len ?y20) (len ?x19))) (queue ?x19 ?y20) (queue (append ?x19 (qrev ?y20)) nil)) => (amortizeQueue ?x19 ?y20)
(enqueue (queue ?x21 ?y22) ?n) => (amortizeQueue ?x21 (cons ?n ?y22))
(amortizeQueue ?x21 (cons ?n ?y22)) => (enqueue (queue ?x21 ?y22) ?n)
(qpop (queue ?x23 (cons ?n ?y24))) => (queue ?x23 ?y24)
(qpop (queue ?x25 nil)) => (queue (butlast ?x25) nil)
(queue (butlast ?x25) nil) => (qpop (queue ?x25 nil))
(less ?autovar5 zero) => (potential_split ?autovar5 (succ (param_Nat_0 ?autovar5)) zero) if Cond(var: ?autovar5, pat: (succ ?param_0)) Cond(var: ?autovar5, pat: zero)
(less ?autovar5 (succ ?autovar1)) => (potential_split ?autovar5 (succ (param_Nat_0 ?autovar5)) zero) if Cond(var: ?autovar5, pat: (succ ?param_0)) Cond(var: ?autovar5, pat: zero)
(less ?autovar5 (succ ?autovar3)) => (potential_split ?autovar5 (succ (param_Nat_0 ?autovar5)) zero) if Cond(var: ?autovar5, pat: (succ ?param_0)) Cond(var: ?autovar5, pat: zero)
(less zero ?autovar6) => (potential_split ?autovar6 (succ (param_Nat_0 ?autovar6)) zero) if Cond(var: ?autovar6, pat: (succ ?param_0)) Cond(var: ?autovar6, pat: zero)
(less zero ?autovar6) => (potential_split ?autovar6 (succ (param_Nat_0 ?autovar6)) zero) if Cond(var: ?autovar6, pat: (succ ?param_0)) Cond(var: ?autovar6, pat: zero)
(less (succ ?autovar4) ?autovar6) => (potential_split ?autovar6 (succ (param_Nat_0 ?autovar6)) zero) if Cond(var: ?autovar6, pat: (succ ?param_0)) Cond(var: ?autovar6, pat: zero)
(plus ?autovar3 (len ?autovar2)) => (potential_split ?autovar3 (succ (param_Nat_0 ?autovar3)) zero) if Cond(var: ?autovar3, pat: (succ ?param_0)) Cond(var: ?autovar3, pat: zero)
 ex is: zero
 ex is: (succ zero)
 ex is: (succ (succ zero))
 ex is: nil
 ex is: (cons autovar_Nat_0 nil)
 ex is: (cons autovar_Nat_1 (cons autovar_Nat_0 nil))
Running TheSy on datatypes: Lst Nat dict: less plus append len butlast qreva qrev queue-to-lst qlen isAmortized isEmpty amortizeQueue enqueue qpop leq succ zero cons nil
01:26:34 [0m[33m[WARN] [0m# of splitters: 1
01:26:34 [0m[33m[WARN] [0m# of splitters: 1
01:26:34 [0m[33m[WARN] [0m# of splitters: 1
01:26:34 [0m[33m[WARN] [0m# of splitters: 1
proved: (len (append ?ts_ph_Lst_0 ?ts_ph_Lst_2)) => (plus (len ?ts_ph_Lst_0) (len ?ts_ph_Lst_2))
proved: (plus (len ?ts_ph_Lst_0) (len ?ts_ph_Lst_2)) => (len (append ?ts_ph_Lst_0 ?ts_ph_Lst_2))
01:26:34 [0m[33m[WARN] [0mFound all lemmas
done in 3
