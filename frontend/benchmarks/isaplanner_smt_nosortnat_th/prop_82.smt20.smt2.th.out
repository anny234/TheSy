Collecting statistics
(zip nil2 ?y) => nil
(zip (cons2 ?z ?x2) nil2) => nil
(zip (cons2 ?z ?x2) (cons2 ?x3 ?x4)) => (cons (pair2 ?z ?x3) (zip ?x2 ?x4))
(cons (pair2 ?z ?x3) (zip ?x2 ?x4)) => (zip (cons2 ?z ?x2) (cons2 ?x3 ?x4))
(take Z ?y) => nil2
(take (S ?z0) nil2) => nil2
(take (S ?z1) (cons2 ?x22 ?x33)) => (cons2 ?x22 (take ?z1 ?x33))
(cons2 ?x22 (take ?z1 ?x33)) => (take (S ?z1) (cons2 ?x22 ?x33))
(zip ?autovar11 nil2) => (potential_split ?autovar11 nil2 (cons2 (param_list2_0 ?autovar11) (param_list2_1 ?autovar11))) if Cond(var: ?autovar11, pat: nil2) Cond(var: ?autovar11, pat: (cons2 ?param_0 ?param_1))
(zip ?autovar11 (cons2 ?autovar5 ?autovar6)) => (potential_split ?autovar11 nil2 (cons2 (param_list2_0 ?autovar11) (param_list2_1 ?autovar11))) if Cond(var: ?autovar11, pat: nil2) Cond(var: ?autovar11, pat: (cons2 ?param_0 ?param_1))
(zip (cons2 ?autovar7 ?autovar8) ?autovar12) => (potential_split ?autovar12 nil2 (cons2 (param_list2_0 ?autovar12) (param_list2_1 ?autovar12))) if Cond(var: ?autovar12, pat: nil2) Cond(var: ?autovar12, pat: (cons2 ?param_0 ?param_1))
(zip (cons2 ?autovar9 ?autovar10) ?autovar12) => (potential_split ?autovar12 nil2 (cons2 (param_list2_0 ?autovar12) (param_list2_1 ?autovar12))) if Cond(var: ?autovar12, pat: nil2) Cond(var: ?autovar12, pat: (cons2 ?param_0 ?param_1))
(take ?autovar7 nil2) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(take ?autovar7 (cons2 ?autovar3 ?autovar4)) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(take (S ?autovar5) ?autovar8) => (potential_split ?autovar8 nil2 (cons2 (param_list2_0 ?autovar8) (param_list2_1 ?autovar8))) if Cond(var: ?autovar8, pat: nil2) Cond(var: ?autovar8, pat: (cons2 ?param_0 ?param_1))
(take (S ?autovar6) ?autovar8) => (potential_split ?autovar8 nil2 (cons2 (param_list2_0 ?autovar8) (param_list2_1 ?autovar8))) if Cond(var: ?autovar8, pat: nil2) Cond(var: ?autovar8, pat: (cons2 ?param_0 ?param_1))
 ex is: nil2
 ex is: (cons2 autovar_sk_0 nil2)
 ex is: (cons2 autovar_sk_1 (cons2 autovar_sk_0 nil2))
 ex is: Z
 ex is: (S Z)
 ex is: (S (S Z))
Running TheSy on datatypes: list2 Nat dict: zip take nil2 cons2 Z S
Starting depth 1
08:23:50 [0m[33m[WARN] [0m# of splitters: 4
08:23:50 [0m[33m[WARN] [0m# of splitters: 3
08:23:50 [0m[33m[WARN] [0m# of splitters: 3
08:23:50 [0m[33m[WARN] [0m# of splitters: 2
08:23:50 [0m[33m[WARN] [0m# of splitters: 3
08:23:51 [0m[33m[WARN] [0m# of splitters: 1
08:23:51 [0m[33m[WARN] [0m# of splitters: 2
08:23:51 [0m[33m[WARN] [0m# of splitters: 1
08:23:51 [0m[33m[WARN] [0mproved: (zip ?ts_ph_list2_0 nil2) => nil
08:23:51 [0m[33m[WARN] [0mproved: (take ?ts_ph_Nat_0 nil2) => nil2
Starting depth 2
08:23:51 [0m[33m[WARN] [0m# of splitters: 16
08:23:51 [0m[33m[WARN] [0m# of splitters: 11
08:23:55 [0m[33m[WARN] [0m# of splitters: 16
08:23:59 [0m[33m[WARN] [0m# of splitters: 10
08:24:01 [0m[33m[WARN] [0m# of splitters: 15
08:24:05 [0m[33m[WARN] [0m# of splitters: 10
08:24:07 [0m[33m[WARN] [0m# of splitters: 14
08:24:11 [0m[33m[WARN] [0m# of splitters: 9
08:24:13 [0m[33m[WARN] [0m# of splitters: 13
08:24:14 [0m[33m[WARN] [0m# of splitters: 11
08:24:14 [0m[33m[WARN] [0m# of splitters: 12
08:24:16 [0m[33m[WARN] [0m# of splitters: 10
08:24:17 [0m[33m[WARN] [0m# of splitters: 11
08:24:20 [0m[33m[WARN] [0m# of splitters: 9
08:24:21 [0m[33m[WARN] [0m# of splitters: 10
08:24:22 [0m[33m[WARN] [0m# of splitters: 8
08:24:23 [0m[33m[WARN] [0m# of splitters: 9
08:24:23 [0m[33m[WARN] [0m# of splitters: 1
08:24:23 [0m[33m[WARN] [0mproved: (take ?ts_ph_Nat_1 ?ts_ph_list2_0) => (take ?ts_ph_Nat_1 (take ?ts_ph_Nat_1 ?ts_ph_list2_0))
08:24:23 [0m[33m[WARN] [0mproved: (take ?ts_ph_Nat_1 (take ?ts_ph_Nat_1 ?ts_ph_list2_0)) => (take ?ts_ph_Nat_1 ?ts_ph_list2_0)

08:24:24 [0m[33m[WARN] [0m# of splitters: 2
08:24:24 [0m[33m[WARN] [0m# of splitters: 1
08:24:24 [0m[33m[WARN] [0m# of splitters: 1
08:24:24 [0m[33m[WARN] [0mproved: (zip ?ts_ph_list2_0 (take ?ts_ph_Nat_1 ?ts_ph_list2_0)) => (zip (take ?ts_ph_Nat_1 ?ts_ph_list2_0) ?ts_ph_list2_0)
08:24:24 [0m[33m[WARN] [0mproved: (zip (take ?ts_ph_Nat_1 ?ts_ph_list2_0) ?ts_ph_list2_0) => (zip ?ts_ph_list2_0 (take ?ts_ph_Nat_1 ?ts_ph_list2_0))

08:24:24 [0m[33m[WARN] [0m# of splitters: 3
08:24:24 [0m[33m[WARN] [0m# of splitters: 1
08:24:24 [0m[33m[WARN] [0m# of splitters: 2
08:24:24 [0m[33m[WARN] [0mproved: (take ?ts_ph_Nat_1 ?ts_ph_list2_0) => (take (S ?ts_ph_Nat_1) (take ?ts_ph_Nat_1 ?ts_ph_list2_0))
08:24:24 [0m[33m[WARN] [0mproved: (take (S ?ts_ph_Nat_1) (take ?ts_ph_Nat_1 ?ts_ph_list2_0)) => (take ?ts_ph_Nat_1 ?ts_ph_list2_0)

08:24:27 [0m[33m[WARN] [0m# of splitters: 2
08:24:27 [0m[33m[WARN] [0m# of splitters: 1
08:24:27 [0m[33m[WARN] [0m# of splitters: 81
08:24:27 [0m[33m[WARN] [0m# of splitters: 1
08:24:27 [0m[33m[WARN] [0mproved: (zip (take ?ts_ph_Nat_1 ?ts_ph_list2_0) (take ?ts_ph_Nat_1 ?ts_ph_list2_0)) => (zip ?ts_ph_list2_0 (take ?ts_ph_Nat_1 ?ts_ph_list2_0))
08:24:27 [0m[33m[WARN] [0mproved: (zip ?ts_ph_list2_0 (take ?ts_ph_Nat_1 ?ts_ph_list2_0)) => (zip (take ?ts_ph_Nat_1 ?ts_ph_list2_0) (take ?ts_ph_Nat_1 ?ts_ph_list2_0))

done in 43256
