Collecting statistics
(== Z Z) => true
(== Z (S ?z)) => false
(== (S ?x2) Z) => false
(== (S ?x2) (S ?y2)) => (== ?x2 ?y2)
(== ?x2 ?y2) => (== (S ?x2) (S ?y2))
(count ?x nil) => Z
(count ?x (cons ?z ?ys)) => (count ?x ?ys)
(count ?x (cons ?z ?ys)) => (S (count ?x ?ys))
(++ nil2 ?y) => ?y
(++ (cons2 ?z0 ?xs) ?y) => (cons2 ?z0 (++ ?xs ?y))
(cons2 ?z0 (++ ?xs ?y)) => (++ (cons2 ?z0 ?xs) ?y)
(rev nil2) => nil2
nil2 => (rev nil2)
(rev (cons2 ?y1 ?xs)) => (++ (rev ?xs) (cons2 ?y1 nil2))
(++ (rev ?xs) (cons2 ?y1 nil2)) => (rev (cons2 ?y1 ?xs))
(== ?autovar7 Z) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(== ?autovar7 (S ?autovar1)) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(== ?autovar7 Z) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(== ?autovar7 (S ?autovar4)) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(== Z ?autovar8) => (potential_split ?autovar8 Z (S (param_Nat_0 ?autovar8))) if Cond(var: ?autovar8, pat: Z) Cond(var: ?autovar8, pat: (S ?param_0))
(== Z ?autovar8) => (potential_split ?autovar8 Z (S (param_Nat_0 ?autovar8))) if Cond(var: ?autovar8, pat: Z) Cond(var: ?autovar8, pat: (S ?param_0))
(== (S ?autovar5) ?autovar8) => (potential_split ?autovar8 Z (S (param_Nat_0 ?autovar8))) if Cond(var: ?autovar8, pat: Z) Cond(var: ?autovar8, pat: (S ?param_0))
(== (S ?autovar6) ?autovar8) => (potential_split ?autovar8 Z (S (param_Nat_0 ?autovar8))) if Cond(var: ?autovar8, pat: Z) Cond(var: ?autovar8, pat: (S ?param_0))
(++ ?autovar3 (cons2 ?autovar2 nil2)) => (potential_split ?autovar3 nil2 (cons2 (param_list2_0 ?autovar3) (param_list2_1 ?autovar3))) if Cond(var: ?autovar3, pat: nil2) Cond(var: ?autovar3, pat: (cons2 ?param_0 ?param_1))
 ex is: nil2
 ex is: (cons2 autovar_sk_0 nil2)
 ex is: (cons2 autovar_sk_1 (cons2 autovar_sk_0 nil2))
 ex is: Z
 ex is: (S Z)
 ex is: (S (S Z))
 ex is: nil
 ex is: (cons autovar_Nat_0 nil)
 ex is: (cons autovar_Nat_1 (cons autovar_Nat_0 nil))
Running TheSy on datatypes: list2 Nat list dict: == count ++ rev nil2 cons2 Z S nil cons
Starting depth 1
08:23:50 [0m[33m[WARN] [0m# of splitters: 3
08:23:50 [0m[33m[WARN] [0m# of splitters: 2
08:23:50 [0m[33m[WARN] [0m# of splitters: 2
08:23:50 [0m[33m[WARN] [0m# of splitters: 1
08:23:50 [0m[33m[WARN] [0m# of splitters: 2
08:23:50 [0m[33m[WARN] [0m# of splitters: 2
08:23:50 [0m[33m[WARN] [0mproved: (== Z ?ts_ph_Nat_0) => (== ?ts_ph_Nat_0 Z)
08:23:50 [0m[33m[WARN] [0mproved: (== ?ts_ph_Nat_0 Z) => (== Z ?ts_ph_Nat_0)
08:23:50 [0m[33m[WARN] [0mproved: (++ ?ts_ph_list2_0 nil2) => ?ts_ph_list2_0
08:23:50 [0m[33m[WARN] [0mproved: (== ?ts_ph_Nat_0 ?ts_ph_Nat_0) => true

Starting depth 2
08:23:50 [0m[33m[WARN] [0m# of splitters: 29
08:23:50 [0m[33m[WARN] [0m# of splitters: 24
08:23:51 [0m[33m[WARN] [0m# of splitters: 29
08:23:53 [0m[33m[WARN] [0m# of splitters: 23
08:23:53 [0m[33m[WARN] [0m# of splitters: 28
08:23:54 [0m[33m[WARN] [0m# of splitters: 21
08:23:55 [0m[33m[WARN] [0m# of splitters: 32
08:23:55 [0m[33m[WARN] [0m# of splitters: 25
08:23:56 [0m[33m[WARN] [0m# of splitters: 26
08:23:57 [0m[33m[WARN] [0m# of splitters: 24
08:23:57 [0m[33m[WARN] [0m# of splitters: 25
08:23:58 [0m[33m[WARN] [0m# of splitters: 23
08:23:59 [0m[33m[WARN] [0m# of splitters: 24
08:24:00 [0m[33m[WARN] [0m# of splitters: 22
08:24:00 [0m[33m[WARN] [0m# of splitters: 23
08:24:01 [0m[33m[WARN] [0m# of splitters: 21
08:24:02 [0m[33m[WARN] [0m# of splitters: 22
08:24:02 [0m[33m[WARN] [0m# of splitters: 20
08:24:03 [0m[33m[WARN] [0m# of splitters: 21
08:24:04 [0m[33m[WARN] [0m# of splitters: 19
08:24:04 [0m[33m[WARN] [0m# of splitters: 20
08:24:05 [0m[33m[WARN] [0m# of splitters: 18
08:24:07 [0m[33m[WARN] [0m# of splitters: 19
08:24:07 [0m[33m[WARN] [0m# of splitters: 17
08:24:08 [0m[33m[WARN] [0m# of splitters: 19
08:24:09 [0m[33m[WARN] [0m# of splitters: 16
08:24:10 [0m[33m[WARN] [0m# of splitters: 18
08:24:10 [0m[33m[WARN] [0m# of splitters: 15
08:24:11 [0m[33m[WARN] [0m# of splitters: 17
08:24:11 [0m[33m[WARN] [0m# of splitters: 14
08:24:12 [0m[33m[WARN] [0m# of splitters: 16
08:24:13 [0m[33m[WARN] [0m# of splitters: 9
08:24:13 [0m[33m[WARN] [0m# of splitters: 17
08:24:14 [0m[33m[WARN] [0m# of splitters: 12
08:24:15 [0m[33m[WARN] [0m# of splitters: 14
08:24:15 [0m[33m[WARN] [0m# of splitters: 11
08:24:16 [0m[33m[WARN] [0m# of splitters: 13
08:24:16 [0m[33m[WARN] [0m# of splitters: 10
08:24:17 [0m[33m[WARN] [0m# of splitters: 12
08:24:17 [0m[33m[WARN] [0m# of splitters: 9
08:24:18 [0m[33m[WARN] [0m# of splitters: 10
08:24:18 [0m[33m[WARN] [0m# of splitters: 1
08:24:18 [0m[33m[WARN] [0m# of splitters: 2
08:24:18 [0m[33m[WARN] [0m# of splitters: 1
08:24:18 [0m[33m[WARN] [0mproved: (== ?ts_ph_Nat_0 (S Z)) => (== (S Z) ?ts_ph_Nat_0)
08:24:18 [0m[33m[WARN] [0mproved: (== (S Z) ?ts_ph_Nat_0) => (== ?ts_ph_Nat_0 (S Z))
08:24:18 [0m[33m[WARN] [0m# of splitters: 1
08:24:18 [0m[33m[WARN] [0m# of splitters: 1
08:24:18 [0m[33m[WARN] [0mproved: (== (S ?ts_ph_Nat_0) ?ts_ph_Nat_0) => false
generalizing (++ (++ ts_ph_list2_0 ts_ph_list2_1) ts_ph_list2_1) = (++ ts_ph_list2_0 (++ ts_ph_list2_1 ts_ph_list2_1))
generalized as case_split
08:24:18 [0m[33m[WARN] [0mproved: (++ (++ ?ts_ph_list2_0 ?ts_ph_list2_1) ?ts_ph_list2_2) => (++ ?ts_ph_list2_0 (++ ?ts_ph_list2_1 ?ts_ph_list2_2))
08:24:18 [0m[33m[WARN] [0mproved: (++ ?ts_ph_list2_0 (++ ?ts_ph_list2_1 ?ts_ph_list2_2)) => (++ (++ ?ts_ph_list2_0 ?ts_ph_list2_1) ?ts_ph_list2_2)
08:24:18 [0m[33m[WARN] [0m# of splitters: 3
08:24:18 [0m[33m[WARN] [0m# of splitters: 2
08:24:18 [0m[33m[WARN] [0m# of splitters: 4
08:24:18 [0m[33m[WARN] [0m# of splitters: 8
08:24:18 [0m[33m[WARN] [0m# of splitters: 2
08:24:18 [0m[33m[WARN] [0m# of splitters: 1
08:24:18 [0m[33m[WARN] [0mproved: (== ?ts_ph_Nat_0 ?ts_ph_Nat_1) => (== ?ts_ph_Nat_1 ?ts_ph_Nat_0)
08:24:18 [0m[33m[WARN] [0mproved: (== ?ts_ph_Nat_1 ?ts_ph_Nat_0) => (== ?ts_ph_Nat_0 ?ts_ph_Nat_1)

08:24:18 [0m[33m[WARN] [0m# of splitters: 1
08:24:18 [0m[33m[WARN] [0m# of splitters: 2
08:24:18 [0m[33m[WARN] [0m# of splitters: 2
08:24:18 [0m[33m[WARN] [0m# of splitters: 1
08:24:18 [0m[33m[WARN] [0m# of splitters: 2
08:24:18 [0m[33m[WARN] [0m# of splitters: 1
08:24:18 [0m[33m[WARN] [0mproved: (rev (++ ?ts_ph_list2_0 ?ts_ph_list2_1)) => (++ (rev ?ts_ph_list2_1) (rev ?ts_ph_list2_0))
08:24:18 [0m[33m[WARN] [0mproved: (++ (rev ?ts_ph_list2_1) (rev ?ts_ph_list2_0)) => (rev (++ ?ts_ph_list2_0 ?ts_ph_list2_1))

08:24:19 [0m[33m[WARN] [0m# of splitters: 1
08:24:19 [0m[33m[WARN] [0m# of splitters: 4
08:24:19 [0m[33m[WARN] [0mproved: (rev (rev ?ts_ph_list2_0)) => ?ts_ph_list2_0

done in 28863
