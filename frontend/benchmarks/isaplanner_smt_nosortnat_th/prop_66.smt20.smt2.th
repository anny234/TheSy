(datatype list () ((nil list) (cons sk list list)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(declare-fun <=2 (Nat Nat) Bool)
(declare-fun len (list) Nat)
(declare-fun filter (fun13 list) list)
(declare-fun apply13 (fun13 sk) Bool)
(=> rule0 (len nil) Z)
(=> rule1 Z (len nil))
(=> rule2 (len (cons ?y ?xs)) (S (len ?xs)))
(=> rule3 (filter ?x nil) nil)
(=> rule4 (=> (apply13 x z) (= (filter ?x (cons ?z ?xs)) (cons ?z (filter ?x ?xs)))))
(=> rule5 (=> (apply13 x z) (= (filter ?x (cons ?z ?xs)) (cons ?z (filter ?x ?xs)))))
(=> rule6 (=> (not (apply13 x z)) (= (filter ?x (cons ?z ?xs)) (filter ?x ?xs))))
(=> rule7 (<=2 Z ?y0) true)
(=> rule8 (<=2 (S ?z1) Z) false)
(=> rule9 (<=2 (S ?z2) (S ?x2)) (<=2 ?z2 ?x2))
(=> rule10 (<=2 ?z2 ?x2) (<=2 (S ?z2) (S ?x2)))
