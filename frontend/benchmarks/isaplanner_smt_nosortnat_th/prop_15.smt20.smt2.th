(datatype list2 () ((nil2 list2) (cons2 sk list2 list2)))
(datatype Nat () ((Z Nat) (S Nat Nat)))
(datatype list () ((nil list) (cons Nat list list)))
(declare-fun len (list2) Nat)
(declare-fun <2 (Nat Nat) Bool)
(declare-fun ins (Nat list) list)
(=> rule0 (<2 ?x Z) false)
(=> rule1 (<2 Z (S ?z)) true)
(=> rule2 (<2 (S ?x2) (S ?z)) (<2 ?x2 ?z))
(=> rule3 (<2 ?x2 ?z) (<2 (S ?x2) (S ?z)))
(=> rule4 (ins ?x nil) (cons ?x nil))
(=> rule5 (cons ?x nil) (ins ?x nil))
(=> rule6 (=> (not (<2 x z)) (= (ins ?x (cons ?z ?xs)) (cons ?z (ins ?x ?xs)))))
(=> rule7 (=> (not (<2 x z)) (= (ins ?x (cons ?z ?xs)) (cons ?z (ins ?x ?xs)))))
(=> rule8 (=> (<2 x z) (= (ins ?x (cons ?z ?xs)) (cons ?x (cons ?z ?xs)))))
(=> rule9 (=> (<2 x z) (= (ins ?x (cons ?z ?xs)) (cons ?x (cons ?z ?xs)))))
(=> rule10 (len nil2) Z)
(=> rule11 Z (len nil2))
(=> rule12 (len (cons2 ?y ?xs0)) (S (len ?xs0)))
