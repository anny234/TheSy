Collecting statistics
(leq ?__x0 ?__y1) => (or (= ?__x0 ?__y1) (less ?__x0 ?__y1))
(or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) => (leq ?__x0 ?__y1)
(take ?x nil) => nil
(take zero ?x2) => nil
(take (succ ?x) (cons ?y ?z)) => (cons ?y (take ?x ?z))
(cons ?y (take ?x ?z)) => (take (succ ?x) (cons ?y ?z))
(zip nil ?x3) => znil
(zip ?x4 nil) => znil
(zip (cons ?x ?y5) (cons ?z6 ?w)) => (zcons (mkpair ?x ?z6) (zip ?y5 ?w))
(zcons (mkpair ?x ?z6) (zip ?y5 ?w)) => (zip (cons ?x ?y5) (cons ?z6 ?w))
(ztake ?x znil) => znil
(ztake zero ?x7) => znil
(ztake (succ ?x) (zcons ?y8 ?z9)) => (zcons ?y8 (ztake ?x ?z9))
(zcons ?y8 (ztake ?x ?z9)) => (ztake (succ ?x) (zcons ?y8 ?z9))
(take ?autovar5 (cons ?autovar2 ?autovar3)) => (potential_split ?autovar5 (succ (param_Nat_0 ?autovar5)) zero) if Cond(var: ?autovar5, pat: (succ ?param_0)) Cond(var: ?autovar5, pat: zero)
(take (succ ?autovar4) ?autovar6) => (potential_split ?autovar6 (cons (param_Lst_0 ?autovar6) (param_Lst_1 ?autovar6)) nil) if Cond(var: ?autovar6, pat: (cons ?param_0 ?param_1)) Cond(var: ?autovar6, pat: nil)
(zip ?autovar7 (cons ?autovar3 ?autovar4)) => (potential_split ?autovar7 (cons (param_Lst_0 ?autovar7) (param_Lst_1 ?autovar7)) nil) if Cond(var: ?autovar7, pat: (cons ?param_0 ?param_1)) Cond(var: ?autovar7, pat: nil)
(zip (cons ?autovar5 ?autovar6) ?autovar8) => (potential_split ?autovar8 (cons (param_Lst_0 ?autovar8) (param_Lst_1 ?autovar8)) nil) if Cond(var: ?autovar8, pat: (cons ?param_0 ?param_1)) Cond(var: ?autovar8, pat: nil)
(ztake ?autovar5 (zcons ?autovar2 ?autovar3)) => (potential_split ?autovar5 (succ (param_Nat_0 ?autovar5)) zero) if Cond(var: ?autovar5, pat: (succ ?param_0)) Cond(var: ?autovar5, pat: zero)
(ztake (succ ?autovar4) ?autovar6) => (potential_split ?autovar6 (zcons (param_ZLst_0 ?autovar6) (param_ZLst_1 ?autovar6)) znil) if Cond(var: ?autovar6, pat: (zcons ?param_0 ?param_1)) Cond(var: ?autovar6, pat: znil)
 ex is: zero
 ex is: (succ zero)
 ex is: (succ (succ zero))
 ex is: nil
 ex is: (cons autovar_Nat_0 nil)
 ex is: (cons autovar_Nat_1 (cons autovar_Nat_0 nil))
 ex is: (mkpair autovar_Nat_0 autovar_Nat_1)
 ex is: znil
 ex is: (zcons autovar_Pair_0 znil)
 ex is: (zcons autovar_Pair_1 (zcons autovar_Pair_0 znil))
Running TheSy on datatypes: Lst ZLst Pair Nat dict: take zip ztake leq succ zero cons nil mkpair zcons znil
Starting depth 1
01:28:56 [0m[33m[WARN] [0m# of splitters: 6
01:28:56 [0m[33m[WARN] [0m# of splitters: 5
01:28:57 [0m[33m[WARN] [0m# of splitters: 5
01:28:58 [0m[33m[WARN] [0m# of splitters: 4
01:28:59 [0m[33m[WARN] [0m# of splitters: 4
01:28:59 [0m[33m[WARN] [0m# of splitters: 3
01:29:00 [0m[33m[WARN] [0m# of splitters: 3
01:29:01 [0m[33m[WARN] [0m# of splitters: 3
01:29:01 [0m[33m[WARN] [0m# of splitters: 2
01:29:02 [0m[33m[WARN] [0m# of splitters: 1
01:29:02 [0m[33m[WARN] [0m# of splitters: 1
01:29:02 [0m[33m[WARN] [0mproved: (leq zero ?ts_ph_Nat_0) => true
Starting depth 2
01:29:02 [0m[33m[WARN] [0m# of splitters: 38
01:29:03 [0m[33m[WARN] [0m# of splitters: 37
01:29:33 [0m[33m[WARN] [0m# of splitters: 31
01:29:46 [0m[33m[WARN] [0m# of splitters: 36
01:29:58 [0m[33m[WARN] [0m# of splitters: 30
01:30:05 [0m[33m[WARN] [0m# of splitters: 35
01:30:15 [0m[33m[WARN] [0m# of splitters: 29
01:30:23 [0m[33m[WARN] [0m# of splitters: 34
01:30:37 [0m[33m[WARN] [0m# of splitters: 24
01:30:42 [0m[33m[WARN] [0m# of splitters: 33
01:30:48 [0m[33m[WARN] [0m# of splitters: 29
01:30:52 [0m[33m[WARN] [0m# of splitters: 32
01:30:54 [0m[33m[WARN] [0m# of splitters: 28
01:30:56 [0m[33m[WARN] [0m# of splitters: 31
01:30:57 [0m[33m[WARN] [0m# of splitters: 31
01:31:03 [0m[33m[WARN] [0m# of splitters: 30
01:31:08 [0m[33m[WARN] [0m# of splitters: 30
01:31:11 [0m[33m[WARN] [0m# of splitters: 29
01:31:19 [0m[33m[WARN] [0m# of splitters: 29
01:31:26 [0m[33m[WARN] [0m# of splitters: 28
01:31:31 [0m[33m[WARN] [0m# of splitters: 28
01:31:39 [0m[33m[WARN] [0m# of splitters: 27
01:31:41 [0m[33m[WARN] [0m# of splitters: 27
01:31:47 [0m[33m[WARN] [0m# of splitters: 26
01:31:57 [0m[33m[WARN] [0m# of splitters: 26
01:32:03 [0m[33m[WARN] [0m# of splitters: 25
01:32:09 [0m[33m[WARN] [0m# of splitters: 25
01:32:14 [0m[33m[WARN] [0m# of splitters: 24
01:32:17 [0m[33m[WARN] [0m# of splitters: 24
01:32:24 [0m[33m[WARN] [0m# of splitters: 23
01:32:32 [0m[33m[WARN] [0m# of splitters: 23
01:32:37 [0m[33m[WARN] [0m# of splitters: 22
01:32:41 [0m[33m[WARN] [0m# of splitters: 22
01:32:46 [0m[33m[WARN] [0m# of splitters: 21
01:32:53 [0m[33m[WARN] [0m# of splitters: 21
01:33:00 [0m[33m[WARN] [0m# of splitters: 20
01:33:06 [0m[33m[WARN] [0m# of splitters: 20
01:33:13 [0m[33m[WARN] [0m# of splitters: 19
01:33:14 [0m[33m[WARN] [0m# of splitters: 19
01:33:19 [0m[33m[WARN] [0m# of splitters: 18
01:33:21 [0m[33m[WARN] [0m# of splitters: 18
01:33:28 [0m[33m[WARN] [0mproved: (leq (succ zero) (succ ?ts_ph_Nat_0)) => true
done in 271977
