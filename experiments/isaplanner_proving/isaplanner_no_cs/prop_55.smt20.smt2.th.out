Collecting statistics
(-2 Z ?y) => Z
(-2 (S ?z) Z) => (S ?z)
(S ?z) => (-2 (S ?z) Z)
(-2 (S ?z) (S ?x2)) => (-2 ?z ?x2)
(-2 ?z ?x2) => (-2 (S ?z) (S ?x2))
(len nil) => Z
Z => (len nil)
(len (cons ?y0 ?xs)) => (S (len ?xs))
(drop Z ?y1) => ?y1
(drop (S ?z) nil) => nil
(drop (S ?z) (cons ?x22 ?x3)) => (drop ?z ?x3)
(++ nil ?y3) => ?y3
(++ (cons ?z5 ?xs) ?y4) => (cons ?z5 (++ ?xs ?y4))
(cons ?z5 (++ ?xs ?y4)) => (++ (cons ?z5 ?xs) ?y4)
(drop ?autovar7 nil) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(drop ?autovar7 (cons ?autovar3 ?autovar4)) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(drop (S ?autovar5) ?autovar8) => (potential_split ?autovar8 nil (cons (param_list_0 ?autovar8) (param_list_1 ?autovar8))) if Cond(var: ?autovar8, pat: nil) Cond(var: ?autovar8, pat: (cons ?param_0 ?param_1))
(drop (S ?autovar6) ?autovar8) => (potential_split ?autovar8 nil (cons (param_list_0 ?autovar8) (param_list_1 ?autovar8))) if Cond(var: ?autovar8, pat: nil) Cond(var: ?autovar8, pat: (cons ?param_0 ?param_1))
(-2 ?autovar6 Z) => (potential_split ?autovar6 Z (S (param_Nat_0 ?autovar6))) if Cond(var: ?autovar6, pat: Z) Cond(var: ?autovar6, pat: (S ?param_0))
(-2 ?autovar6 (S ?autovar3)) => (potential_split ?autovar6 Z (S (param_Nat_0 ?autovar6))) if Cond(var: ?autovar6, pat: Z) Cond(var: ?autovar6, pat: (S ?param_0))
(-2 (S ?autovar4) ?autovar7) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(-2 (S ?autovar5) ?autovar7) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
 ex is: nil
 ex is: (cons autovar_sk_0 nil)
 ex is: (cons autovar_sk_1 (cons autovar_sk_0 nil))
 ex is: Z
 ex is: (S Z)
 ex is: (S (S Z))
 ex is: nil
 ex is: (cons autovar_sk_0 nil)
 ex is: (cons autovar_sk_1 (cons autovar_sk_0 nil))
 ex is: Z
 ex is: (S Z)
 ex is: (S (S Z))
Running TheSy on datatypes: list Nat dict: len drop -2 ++ nil cons Z S
14:49:30 [0m[33m[WARN] [0m# of splitters: 1
14:49:30 [0m[33m[WARN] [0m# of splitters: 1
14:49:30 [0m[33m[WARN] [0m# of splitters: 1
proved: (drop ?ts_ph_Nat_1 (++ ?ts_ph_list_0 ?ts_ph_list_2)) => (++
  (drop ?ts_ph_Nat_1 ?ts_ph_list_0)
  (drop (-2 ?ts_ph_Nat_1 (len ?ts_ph_list_0)) ?ts_ph_list_2))
proved: (++
  (drop ?ts_ph_Nat_1 ?ts_ph_list_0)
  (drop (-2 ?ts_ph_Nat_1 (len ?ts_ph_list_0)) ?ts_ph_list_2)) => (drop ?ts_ph_Nat_1 (++ ?ts_ph_list_0 ?ts_ph_list_2))
14:49:30 [0m[33m[WARN] [0mFound all lemmas
done in 24
