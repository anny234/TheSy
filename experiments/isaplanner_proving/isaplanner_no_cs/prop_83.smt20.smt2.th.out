Collecting statistics
(zip nil2 ?y) => nil
(zip (cons2 ?z ?x2) nil2) => nil
(zip (cons2 ?z ?x2) (cons2 ?x3 ?x4)) => (cons (pair2 ?z ?x3) (zip ?x2 ?x4))
(cons (pair2 ?z ?x3) (zip ?x2 ?x4)) => (zip (cons2 ?z ?x2) (cons2 ?x3 ?x4))
(take Z ?y) => nil2
(take (S ?z0) nil2) => nil2
(take (S ?z1) (cons2 ?x22 ?x33)) => (cons2 ?x22 (take ?z1 ?x33))
(cons2 ?x22 (take ?z1 ?x33)) => (take (S ?z1) (cons2 ?x22 ?x33))
(len nil2) => Z
Z => (len nil2)
(len (cons2 ?y4 ?xs)) => (S (len ?xs))
(drop Z ?y) => ?y
(drop (S ?z5) nil2) => nil2
(drop (S ?z6) (cons2 ?x27 ?x38)) => (drop ?z6 ?x38)
(++ nil ?y9) => ?y9
(++2 nil2 ?y) => ?y
(++ (cons ?z11 ?xs12) ?y10) => (cons ?z11 (++ ?xs12 ?y10))
(cons ?z11 (++ ?xs12 ?y10)) => (++ (cons ?z11 ?xs12) ?y10)
(++2 (cons2 ?z ?xs) ?y) => (cons2 ?z (++2 ?xs ?y))
(cons2 ?z (++2 ?xs ?y)) => (++2 (cons2 ?z ?xs) ?y)
(zip ?autovar11 nil2) => (potential_split ?autovar11 nil2 (cons2 (param_list2_0 ?autovar11) (param_list2_1 ?autovar11))) if Cond(var: ?autovar11, pat: nil2) Cond(var: ?autovar11, pat: (cons2 ?param_0 ?param_1))
(zip ?autovar11 (cons2 ?autovar5 ?autovar6)) => (potential_split ?autovar11 nil2 (cons2 (param_list2_0 ?autovar11) (param_list2_1 ?autovar11))) if Cond(var: ?autovar11, pat: nil2) Cond(var: ?autovar11, pat: (cons2 ?param_0 ?param_1))
(zip (cons2 ?autovar7 ?autovar8) ?autovar12) => (potential_split ?autovar12 nil2 (cons2 (param_list2_0 ?autovar12) (param_list2_1 ?autovar12))) if Cond(var: ?autovar12, pat: nil2) Cond(var: ?autovar12, pat: (cons2 ?param_0 ?param_1))
(zip (cons2 ?autovar9 ?autovar10) ?autovar12) => (potential_split ?autovar12 nil2 (cons2 (param_list2_0 ?autovar12) (param_list2_1 ?autovar12))) if Cond(var: ?autovar12, pat: nil2) Cond(var: ?autovar12, pat: (cons2 ?param_0 ?param_1))
(take ?autovar7 nil2) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(take ?autovar7 (cons2 ?autovar3 ?autovar4)) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(take (S ?autovar5) ?autovar8) => (potential_split ?autovar8 nil2 (cons2 (param_list2_0 ?autovar8) (param_list2_1 ?autovar8))) if Cond(var: ?autovar8, pat: nil2) Cond(var: ?autovar8, pat: (cons2 ?param_0 ?param_1))
(take (S ?autovar6) ?autovar8) => (potential_split ?autovar8 nil2 (cons2 (param_list2_0 ?autovar8) (param_list2_1 ?autovar8))) if Cond(var: ?autovar8, pat: nil2) Cond(var: ?autovar8, pat: (cons2 ?param_0 ?param_1))
(drop ?autovar7 nil2) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(drop ?autovar7 (cons2 ?autovar3 ?autovar4)) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(drop (S ?autovar5) ?autovar8) => (potential_split ?autovar8 nil2 (cons2 (param_list2_0 ?autovar8) (param_list2_1 ?autovar8))) if Cond(var: ?autovar8, pat: nil2) Cond(var: ?autovar8, pat: (cons2 ?param_0 ?param_1))
(drop (S ?autovar6) ?autovar8) => (potential_split ?autovar8 nil2 (cons2 (param_list2_0 ?autovar8) (param_list2_1 ?autovar8))) if Cond(var: ?autovar8, pat: nil2) Cond(var: ?autovar8, pat: (cons2 ?param_0 ?param_1))
 ex is: (pair2 autovar_sk_0 autovar_sk_1)
 ex is: nil2
 ex is: (cons2 autovar_sk_0 nil2)
 ex is: (cons2 autovar_sk_1 (cons2 autovar_sk_0 nil2))
 ex is: nil
 ex is: (cons autovar_pair_0 nil)
 ex is: (cons autovar_pair_1 (cons autovar_pair_0 nil))
 ex is: Z
 ex is: (S Z)
 ex is: (S (S Z))
 ex is: (pair2 autovar_sk_0 autovar_sk_1)
 ex is: nil2
 ex is: (cons2 autovar_sk_0 nil2)
 ex is: (cons2 autovar_sk_1 (cons2 autovar_sk_0 nil2))
 ex is: nil
 ex is: (cons autovar_pair_0 nil)
 ex is: (cons autovar_pair_1 (cons autovar_pair_0 nil))
 ex is: Z
 ex is: (S Z)
 ex is: (S (S Z))
Running TheSy on datatypes: pair list list2 Nat dict: zip take len drop ++ ++2 pair2 nil2 cons2 nil cons Z S
14:49:26 [0m[33m[WARN] [0m# of splitters: 2
14:49:26 [0m[33m[WARN] [0m# of splitters: 1
14:49:26 [0m[33m[WARN] [0m# of splitters: 1
14:49:26 [0m[33m[WARN] [0m# of splitters: 1
14:49:26 [0m[33m[WARN] [0m# of splitters: 1
14:49:26 [0m[33m[WARN] [0m# of splitters: 1
proved: (zip (++2 ?ts_ph_list2_0 ?ts_ph_list2_1) ?ts_ph_list2_2) => (++
  (zip ?ts_ph_list2_0 (take (len ?ts_ph_list2_0) ?ts_ph_list2_2))
  (zip ?ts_ph_list2_1 (drop (len ?ts_ph_list2_0) ?ts_ph_list2_2)))
proved: (++
  (zip ?ts_ph_list2_0 (take (len ?ts_ph_list2_0) ?ts_ph_list2_2))
  (zip ?ts_ph_list2_1 (drop (len ?ts_ph_list2_0) ?ts_ph_list2_2))) => (zip (++2 ?ts_ph_list2_0 ?ts_ph_list2_1) ?ts_ph_list2_2)
14:49:26 [0m[33m[WARN] [0mFound all lemmas
done in 10
