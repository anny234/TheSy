Collecting statistics
(== Z Z) => true
(sort nil) => nil
nil => (sort nil)
(== Z (S ?z)) => false
(== (S ?x2) Z) => false
(== (S ?x2) (S ?y2)) => (== ?x2 ?y2)
(== ?x2 ?y2) => (== (S ?x2) (S ?y2))
(count ?x nil) => Z
(count ?x (cons ?z ?ys)) => (count ?x ?ys)
(count ?x (cons ?z ?ys)) => (S (count ?x ?ys))
(<=2 Z ?y) => true
(<=2 (S ?z) Z) => false
(<=2 (S ?z) (S ?x2)) => (<=2 ?z ?x2)
(<=2 ?z ?x2) => (<=2 (S ?z) (S ?x2))
(insort ?x nil) => (cons ?x nil)
(cons ?x nil) => (insort ?x nil)
(insort ?x (cons ?z ?xs)) => (cons ?z (insort ?x ?xs))
(insort ?x (cons ?z ?xs)) => (cons ?z (insort ?x ?xs))
(insort ?x (cons ?z ?xs)) => (cons ?x (cons ?z ?xs))
(insort ?x (cons ?z ?xs)) => (cons ?x (cons ?z ?xs))
(sort (cons ?y ?xs)) => (insort ?y (sort ?xs))
(insort ?y (sort ?xs)) => (sort (cons ?y ?xs))
(== ?autovar7 Z) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(== ?autovar7 (S ?autovar1)) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(== ?autovar7 Z) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(== ?autovar7 (S ?autovar4)) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(== Z ?autovar8) => (potential_split ?autovar8 Z (S (param_Nat_0 ?autovar8))) if Cond(var: ?autovar8, pat: Z) Cond(var: ?autovar8, pat: (S ?param_0))
(== Z ?autovar8) => (potential_split ?autovar8 Z (S (param_Nat_0 ?autovar8))) if Cond(var: ?autovar8, pat: Z) Cond(var: ?autovar8, pat: (S ?param_0))
(== (S ?autovar5) ?autovar8) => (potential_split ?autovar8 Z (S (param_Nat_0 ?autovar8))) if Cond(var: ?autovar8, pat: Z) Cond(var: ?autovar8, pat: (S ?param_0))
(== (S ?autovar6) ?autovar8) => (potential_split ?autovar8 Z (S (param_Nat_0 ?autovar8))) if Cond(var: ?autovar8, pat: Z) Cond(var: ?autovar8, pat: (S ?param_0))
(<=2 ?autovar6 Z) => (potential_split ?autovar6 Z (S (param_Nat_0 ?autovar6))) if Cond(var: ?autovar6, pat: Z) Cond(var: ?autovar6, pat: (S ?param_0))
(<=2 ?autovar6 (S ?autovar3)) => (potential_split ?autovar6 Z (S (param_Nat_0 ?autovar6))) if Cond(var: ?autovar6, pat: Z) Cond(var: ?autovar6, pat: (S ?param_0))
(<=2 (S ?autovar4) ?autovar7) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
(<=2 (S ?autovar5) ?autovar7) => (potential_split ?autovar7 Z (S (param_Nat_0 ?autovar7))) if Cond(var: ?autovar7, pat: Z) Cond(var: ?autovar7, pat: (S ?param_0))
 ex is: Z
 ex is: (S Z)
 ex is: (S (S Z))
 ex is: nil
 ex is: (cons autovar_Nat_0 nil)
 ex is: (cons autovar_Nat_1 (cons autovar_Nat_0 nil))
 ex is: Z
 ex is: (S Z)
 ex is: (S (S Z))
 ex is: nil
 ex is: (cons autovar_Nat_0 nil)
 ex is: (cons autovar_Nat_1 (cons autovar_Nat_0 nil))
Running TheSy on datatypes: Nat list dict: == count <=2 insort sort Z S nil cons
Starting depth 1
13:04:03 [0m[33m[WARN] [0m# of splitters: 2
13:04:03 [0m[33m[WARN] [0m# of splitters: 1
13:04:03 [0m[33m[WARN] [0m# of splitters: 1
13:04:03 [0m[33m[WARN] [0m# of splitters: 1
13:04:03 [0m[33m[WARN] [0mproved: (<=2 ?ts_ph_Nat_0 Z) => (== ?ts_ph_Nat_0 Z)
13:04:03 [0m[33m[WARN] [0mproved: (== ?ts_ph_Nat_0 Z) => (<=2 ?ts_ph_Nat_0 Z)
13:04:03 [0m[33m[WARN] [0mproved: (== Z ?ts_ph_Nat_0) => (== ?ts_ph_Nat_0 Z)
13:04:03 [0m[33m[WARN] [0mproved: (== ?ts_ph_Nat_0 Z) => (== Z ?ts_ph_Nat_0)
13:04:03 [0m[33m[WARN] [0mproved: (<=2 ?ts_ph_Nat_0 ?ts_ph_Nat_0) => true
13:04:03 [0m[33m[WARN] [0mproved: (== ?ts_ph_Nat_0 ?ts_ph_Nat_0) => (<=2 ?ts_ph_Nat_0 ?ts_ph_Nat_0)
13:04:03 [0m[33m[WARN] [0mproved: (<=2 ?ts_ph_Nat_0 ?ts_ph_Nat_0) => (== ?ts_ph_Nat_0 ?ts_ph_Nat_0)
Starting depth 2
13:04:03 [0m[33m[WARN] [0m# of splitters: 18
13:04:03 [0m[33m[WARN] [0m# of splitters: 13
13:04:04 [0m[33m[WARN] [0m# of splitters: 18
13:04:05 [0m[33m[WARN] [0m# of splitters: 12
13:04:05 [0m[33m[WARN] [0m# of splitters: 17
13:04:06 [0m[33m[WARN] [0m# of splitters: 15
13:04:07 [0m[33m[WARN] [0m# of splitters: 16
13:04:07 [0m[33m[WARN] [0m# of splitters: 14
13:04:07 [0m[33m[WARN] [0m# of splitters: 15
13:04:08 [0m[33m[WARN] [0m# of splitters: 13
13:04:08 [0m[33m[WARN] [0m# of splitters: 14
13:04:09 [0m[33m[WARN] [0m# of splitters: 12
13:04:09 [0m[33m[WARN] [0m# of splitters: 13
13:04:10 [0m[33m[WARN] [0m# of splitters: 11
13:04:10 [0m[33m[WARN] [0m# of splitters: 12
13:04:11 [0m[33m[WARN] [0m# of splitters: 10
13:04:11 [0m[33m[WARN] [0m# of splitters: 11
13:04:12 [0m[33m[WARN] [0m# of splitters: 9
13:04:12 [0m[33m[WARN] [0m# of splitters: 10
13:04:12 [0m[33m[WARN] [0m# of splitters: 8
13:04:13 [0m[33m[WARN] [0m# of splitters: 9
13:04:13 [0m[33m[WARN] [0m# of splitters: 1
13:04:13 [0m[33m[WARN] [0m# of splitters: 1
13:04:13 [0m[33m[WARN] [0mproved: (== (S ?ts_ph_Nat_0) ?ts_ph_Nat_0) => false
13:04:13 [0m[33m[WARN] [0m# of splitters: 1
13:04:13 [0m[33m[WARN] [0m# of splitters: 1
13:04:13 [0m[33m[WARN] [0mproved: (<=2 (S ?ts_ph_Nat_0) ?ts_ph_Nat_0) => false
13:04:13 [0m[33m[WARN] [0m# of splitters: 1
13:04:13 [0m[33m[WARN] [0mproved: (== (S Z) ?ts_ph_Nat_0) => (== ?ts_ph_Nat_0 (S Z))
13:04:13 [0m[33m[WARN] [0mproved: (== ?ts_ph_Nat_0 (S Z)) => (== (S Z) ?ts_ph_Nat_0)
13:04:13 [0m[33m[WARN] [0m# of splitters: 1
13:04:13 [0m[33m[WARN] [0mproved: (== ?ts_ph_Nat_0 ?ts_ph_Nat_1) => (== ?ts_ph_Nat_1 ?ts_ph_Nat_0)
13:04:13 [0m[33m[WARN] [0mproved: (== ?ts_ph_Nat_1 ?ts_ph_Nat_0) => (== ?ts_ph_Nat_0 ?ts_ph_Nat_1)

13:04:13 [0m[33m[WARN] [0m# of splitters: 1
13:04:13 [0m[33m[WARN] [0m# of splitters: 1
13:04:13 [0m[33m[WARN] [0mproved: (<=2 ?ts_ph_Nat_0 (S ?ts_ph_Nat_0)) => true

done in 10126
