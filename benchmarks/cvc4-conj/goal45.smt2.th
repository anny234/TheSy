(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun zip (Lst Lst) ZLst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x285 ?__y286) (or (= ?__x285 ?__y286) (less ?__x285 ?__y286)))
(=> rule1 (or (= ?__x285 ?__y286) (less ?__x285 ?__y286)) (leq ?__x285 ?__y286))
(=> rule2 (zip nil ?x) znil)
(=> rule3 (zip ?x nil) znil)
(=> rule4 (zip (cons ?x287 ?y) (cons ?z288 ?w)) (zcons (mkpair ?x287 ?z288) (zip ?y ?w)))
(=> rule5 (zcons (mkpair ?x287 ?z288) (zip ?y ?w)) (zip (cons ?x287 ?y) (cons ?z288 ?w)))
(prove (forall ((xs Lst)(ys Lst)(y290 Nat)(x289 Nat)) (= (zip (cons x289 xs) (cons y290 ys)) (zcons (mkpair x289 y290) (zip xs ys)))))
