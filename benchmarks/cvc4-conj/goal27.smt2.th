(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun mem (Nat Lst) Bool)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x215 ?__y216) (or (= ?__x215 ?__y216) (less ?__x215 ?__y216)))
(=> rule1 (or (= ?__x215 ?__y216) (less ?__x215 ?__y216)) (leq ?__x215 ?__y216))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x217 ?y) ?z) (cons ?x217 (append ?y ?z)))
(=> rule4 (cons ?x217 (append ?y ?z)) (append (cons ?x217 ?y) ?z))
(=> rule5 (mem ?x218 nil) false)
(=> rule6 (mem ?x219 (cons ?y220 ?z)) (or (= ?x219 ?y220) (mem ?x219 ?z)))
(=> rule7 (or (= ?x219 ?y220) (mem ?x219 ?z)) (mem ?x219 (cons ?y220 ?z)))
(prove (forall ((t Lst)(x221 Nat)(l Lst)) (= (=> (mem x221 t) (mem x221 (append l t))) true)))
