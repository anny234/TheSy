(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(datatype Pair () ((mkpair Nat Nat Pair)))
(datatype ZLst () ((zcons Pair ZLst ZLst) (znil ZLst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun len (Lst) Nat)
(declare-fun drop (Nat Lst) Lst)
(declare-fun take (Nat Lst) Lst)
(declare-fun zip (Lst Lst) ZLst)
(declare-fun zappend (ZLst ZLst) ZLst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x329 ?__y330) (or (= ?__x329 ?__y330) (less ?__x329 ?__y330)))
(=> rule1 (or (= ?__x329 ?__y330) (less ?__x329 ?__y330)) (leq ?__x329 ?__y330))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x331 ?y) ?z) (cons ?x331 (append ?y ?z)))
(=> rule4 (cons ?x331 (append ?y ?z)) (append (cons ?x331 ?y) ?z))
(=> rule5 (len nil) zero)
(=> rule6 zero (len nil))
(=> rule7 (len (cons ?x332 ?y)) (succ (len ?y)))
(=> rule8 (drop ?x333 nil) nil)
(=> rule9 (drop zero ?x) ?x)
(=> rule10 (drop (succ ?x334) (cons ?y335 ?z)) (drop ?x334 ?z))
(=> rule11 (take ?x336 nil) nil)
(=> rule12 (take zero ?x) nil)
(=> rule13 (take (succ ?x337) (cons ?y338 ?z)) (cons ?y338 (take ?x337 ?z)))
(=> rule14 (cons ?y338 (take ?x337 ?z)) (take (succ ?x337) (cons ?y338 ?z)))
(=> rule15 (zip nil ?x) znil)
(=> rule16 (zip ?x nil) znil)
(=> rule17 (zip (cons ?x339 ?y) (cons ?z340 ?w)) (zcons (mkpair ?x339 ?z340) (zip ?y ?w)))
(=> rule18 (zcons (mkpair ?x339 ?z340) (zip ?y ?w)) (zip (cons ?x339 ?y) (cons ?z340 ?w)))
(=> rule19 (zappend znil ?x341) ?x341)
(=> rule20 (zappend (zcons ?x342 ?y343) ?z344) (zcons ?x342 (zappend ?y343 ?z344)))
(=> rule21 (zcons ?x342 (zappend ?y343 ?z344)) (zappend (zcons ?x342 ?y343) ?z344))
(prove (forall ((xs Lst)(ys Lst)(zs Lst)) (= (zip xs (append ys zs)) (zappend (zip (take (len ys) xs) ys) (zip (drop (len ys) xs) zs)))))
