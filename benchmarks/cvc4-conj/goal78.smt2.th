(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun plus (Nat Nat) Nat)
(declare-fun count (Nat Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x592 ?__y593) (or (= ?__x592 ?__y593) (less ?__x592 ?__y593)))
(=> rule1 (or (= ?__x592 ?__y593) (less ?__x592 ?__y593)) (leq ?__x592 ?__y593))
(=> rule2 (plus zero ?n) ?n)
(=> rule3 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule4 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(=> rule5 (count ?x594 nil) zero)
(=> rule6 (count ?x595 (cons ?y596 ?z)) (ite (= ?x595 ?y596) (succ (count ?x595 ?z)) (count ?x595 ?z)))
(=> rule7 (ite (= ?x595 ?y596) (succ (count ?x595 ?z)) (count ?x595 ?z)) (count ?x595 (cons ?y596 ?z)))
(prove (forall ((h Nat)(t Lst)(n Nat)) (= (plus (count n t) (count n (cons h nil))) (count n (cons h t)))))
