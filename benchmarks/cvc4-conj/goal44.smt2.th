(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun zip (Lst Lst) ZLst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x385 ?__y386) (or (= ?__x385 ?__y386) (less ?__x385 ?__y386)))
(=> rule1 (or (= ?__x385 ?__y386) (less ?__x385 ?__y386)) (leq ?__x385 ?__y386))
(=> rule2 (zip nil ?x) znil)
(=> rule3 (zip ?x nil) znil)
(=> rule4 (zip (cons ?x387 ?y) (cons ?z388 ?w)) (zcons (mkpair ?x387 ?z388) (zip ?y ?w)))
(=> rule5 (zcons (mkpair ?x387 ?z388) (zip ?y ?w)) (zip (cons ?x387 ?y) (cons ?z388 ?w)))
(prove (forall ((xs Lst)(x389 Nat)(ys Lst)) (= (zip (cons x389 xs) ys) (ite (= ys nil) znil (zcons (mkpair x389 (head ys)) (zip xs (tail ys)))))))
