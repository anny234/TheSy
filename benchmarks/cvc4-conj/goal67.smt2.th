(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun P (Nat) Bool)
(declare-fun less (Nat Nat) Bool)
(declare-fun len (Lst) Nat)
(declare-fun filter (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x125 ?__y126) (or (= ?__x125 ?__y126) (less ?__x125 ?__y126)))
(=> rule1 (or (= ?__x125 ?__y126) (less ?__x125 ?__y126)) (leq ?__x125 ?__y126))
(=> rule2 (less ?x127 zero) false)
(=> rule3 (less zero (succ ?x128)) true)
(=> rule4 (less (succ ?x129) (succ ?y130)) (less ?x129 ?y130))
(=> rule5 (less ?x129 ?y130) (less (succ ?x129) (succ ?y130)))
(=> rule6 (len nil) zero)
(=> rule7 zero (len nil))
(=> rule8 (len (cons ?x131 ?y)) (succ (len ?y)))
(=> rule9 (filter nil) nil)
(=> rule10 nil (filter nil))
(=> rule11 (filter (cons ?x132 ?y)) (ite (P ?x132) (cons ?x132 (filter ?y)) (filter ?y)))
(=> rule12 (ite (P ?x132) (cons ?x132 (filter ?y)) (filter ?y)) (filter (cons ?x132 ?y)))
(prove (forall ((xs Lst)) (= (or (= (len (filter xs)) (len xs)) (less (len (filter xs)) (len xs))) true)))
