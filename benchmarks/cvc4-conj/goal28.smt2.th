(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun mem (Nat Lst) Bool)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x311 ?__y312) (or (= ?__x311 ?__y312) (less ?__x311 ?__y312)))
(=> rule1 (or (= ?__x311 ?__y312) (less ?__x311 ?__y312)) (leq ?__x311 ?__y312))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x313 ?y) ?z) (cons ?x313 (append ?y ?z)))
(=> rule4 (cons ?x313 (append ?y ?z)) (append (cons ?x313 ?y) ?z))
(=> rule5 (mem ?x314 nil) false)
(=> rule6 (mem ?x315 (cons ?y316 ?z)) (or (= ?x315 ?y316) (mem ?x315 ?z)))
(=> rule7 (or (= ?x315 ?y316) (mem ?x315 ?z)) (mem ?x315 (cons ?y316 ?z)))
(prove (forall ((l Lst)(x317 Nat)) (= (mem x317 (append l (cons x317 nil))) true)))
