(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun last (Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x74 ?__y75) (or (= ?__x74 ?__y75) (less ?__x74 ?__y75)))
(=> rule1 (or (= ?__x74 ?__y75) (less ?__x74 ?__y75)) (leq ?__x74 ?__y75))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x76 ?y) ?z) (cons ?x76 (append ?y ?z)))
(=> rule4 (cons ?x76 (append ?y ?z)) (append (cons ?x76 ?y) ?z))
(=> rule5 (last (cons ?x77 ?y)) (ite (= ?y nil) ?x77 (last ?y)))
(=> rule6 (ite (= ?y nil) ?x77 (last ?y)) (last (cons ?x77 ?y)))
(prove (forall ((xs Lst)(ys Lst)) (= (=> (= ys nil) (= (last (append xs ys)) (last xs))) true)))
