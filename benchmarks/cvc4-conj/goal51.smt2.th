(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun last (Lst) Nat)
(declare-fun butlast (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x160 ?__y161) (or (= ?__x160 ?__y161) (less ?__x160 ?__y161)))
(=> rule1 (or (= ?__x160 ?__y161) (less ?__x160 ?__y161)) (leq ?__x160 ?__y161))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x162 ?y) ?z) (cons ?x162 (append ?y ?z)))
(=> rule4 (cons ?x162 (append ?y ?z)) (append (cons ?x162 ?y) ?z))
(=> rule5 (last (cons ?x163 ?y)) (ite (= ?y nil) ?x163 (last ?y)))
(=> rule6 (ite (= ?y nil) ?x163 (last ?y)) (last (cons ?x163 ?y)))
(=> rule7 (butlast nil) nil)
(=> rule8 nil (butlast nil))
(=> rule9 (butlast (cons ?x164 ?y)) (ite (= ?y nil) nil (cons ?x164 (butlast ?y))))
(=> rule10 (ite (= ?y nil) nil (cons ?x164 (butlast ?y))) (butlast (cons ?x164 ?y)))
(prove (forall ((xs Lst)(x165 Nat)) (= (butlast (append xs (cons x165 nil))) xs)))
