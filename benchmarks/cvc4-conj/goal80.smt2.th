(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun insort (Nat Lst) Lst)
(declare-fun sorted (Lst) Bool)
(declare-fun sort (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x467 ?__y468) (or (= ?__x467 ?__y468) (less ?__x467 ?__y468)))
(=> rule1 (or (= ?__x467 ?__y468) (less ?__x467 ?__y468)) (leq ?__x467 ?__y468))
(=> rule2 (less ?x469 zero) false)
(=> rule3 (less zero (succ ?x470)) true)
(=> rule4 (less (succ ?x471) (succ ?y472)) (less ?x471 ?y472))
(=> rule5 (less ?x471 ?y472) (less (succ ?x471) (succ ?y472)))
(=> rule6 (insort ?i nil) (cons ?i nil))
(=> rule7 (cons ?i nil) (insort ?i nil))
(=> rule8 (insort ?i (cons ?x473 ?y)) (ite (less ?i ?x473) (cons ?i (cons ?x473 ?y)) (cons ?x473 (insort ?i ?y))))
(=> rule9 (ite (less ?i ?x473) (cons ?i (cons ?x473 ?y)) (cons ?x473 (insort ?i ?y))) (insort ?i (cons ?x473 ?y)))
(=> rule10 (sorted nil) true)
(=> rule11 true (sorted nil))
(=> rule12 (sorted (cons ?x474 nil)) true)
(=> rule13 (sorted (cons ?x475 (cons ?z476 ?y))) (and (sorted (cons ?z476 ?y)) (or (= ?x475 ?z476) (less ?x475 ?z476))))
(=> rule14 (and (sorted (cons ?z476 ?y)) (or (= ?x475 ?z476) (less ?x475 ?z476))) (sorted (cons ?x475 (cons ?z476 ?y))))
(=> rule15 (sort nil) nil)
(=> rule16 nil (sort nil))
(=> rule17 (sort (cons ?x477 ?y)) (insort ?x477 (sort ?y)))
(=> rule18 (insort ?x477 (sort ?y)) (sort (cons ?x477 ?y)))
(prove (forall ((l Lst)) (= (sorted (sort l)) true)))
