(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(datatype Pair () ((mkpair Nat Nat Pair)))
(datatype ZLst () ((zcons Pair ZLst ZLst) (znil ZLst)))
(declare-fun take (Nat Lst) Lst)
(declare-fun zip (Lst Lst) ZLst)
(declare-fun ztake (Nat ZLst) ZLst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x148 ?__y149) (or (= ?__x148 ?__y149) (less ?__x148 ?__y149)))
(=> rule1 (or (= ?__x148 ?__y149) (less ?__x148 ?__y149)) (leq ?__x148 ?__y149))
(=> rule2 (take ?x150 nil) nil)
(=> rule3 (take zero ?x) nil)
(=> rule4 (take (succ ?x151) (cons ?y152 ?z)) (cons ?y152 (take ?x151 ?z)))
(=> rule5 (cons ?y152 (take ?x151 ?z)) (take (succ ?x151) (cons ?y152 ?z)))
(=> rule6 (zip nil ?x) znil)
(=> rule7 (zip ?x nil) znil)
(=> rule8 (zip (cons ?x153 ?y) (cons ?z154 ?w)) (zcons (mkpair ?x153 ?z154) (zip ?y ?w)))
(=> rule9 (zcons (mkpair ?x153 ?z154) (zip ?y ?w)) (zip (cons ?x153 ?y) (cons ?z154 ?w)))
(=> rule10 (ztake ?x155 znil) znil)
(=> rule11 (ztake zero ?x156) znil)
(=> rule12 (ztake (succ ?x157) (zcons ?y158 ?z159)) (zcons ?y158 (ztake ?x157 ?z159)))
(=> rule13 (zcons ?y158 (ztake ?x157 ?z159)) (ztake (succ ?x157) (zcons ?y158 ?z159)))
(prove (forall ((xs Lst)(ys Lst)(n Nat)) (= (ztake n (zip xs ys)) (zip (take n xs) (take n ys)))))
