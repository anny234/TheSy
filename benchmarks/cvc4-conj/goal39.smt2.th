(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun plus (Nat Nat) Nat)
(declare-fun count (Nat Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x585 ?__y586) (or (= ?__x585 ?__y586) (less ?__x585 ?__y586)))
(=> rule1 (or (= ?__x585 ?__y586) (less ?__x585 ?__y586)) (leq ?__x585 ?__y586))
(=> rule2 (plus zero ?n) ?n)
(=> rule3 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule4 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(=> rule5 (count ?x587 nil) zero)
(=> rule6 (count ?x588 (cons ?y589 ?z)) (ite (= ?x588 ?y589) (succ (count ?x588 ?z)) (count ?x588 ?z)))
(=> rule7 (ite (= ?x588 ?y589) (succ (count ?x588 ?z)) (count ?x588 ?z)) (count ?x588 (cons ?y589 ?z)))
(prove (forall ((h Nat)(t Lst)(n Nat)) (= (plus (count n (cons h nil)) (count n t)) (count n (cons h t)))))
