(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun len (Lst) Nat)
(declare-fun insort (Nat Lst) Lst)
(declare-fun sort (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x599 ?__y600) (or (= ?__x599 ?__y600) (less ?__x599 ?__y600)))
(=> rule1 (or (= ?__x599 ?__y600) (less ?__x599 ?__y600)) (leq ?__x599 ?__y600))
(=> rule2 (less ?x601 zero) false)
(=> rule3 (less zero (succ ?x602)) true)
(=> rule4 (less (succ ?x603) (succ ?y604)) (less ?x603 ?y604))
(=> rule5 (less ?x603 ?y604) (less (succ ?x603) (succ ?y604)))
(=> rule6 (len nil) zero)
(=> rule7 zero (len nil))
(=> rule8 (len (cons ?x605 ?y)) (succ (len ?y)))
(=> rule9 (insort ?i nil) (cons ?i nil))
(=> rule10 (cons ?i nil) (insort ?i nil))
(=> rule11 (insort ?i (cons ?x606 ?y)) (ite (less ?i ?x606) (cons ?i (cons ?x606 ?y)) (cons ?x606 (insort ?i ?y))))
(=> rule12 (ite (less ?i ?x606) (cons ?i (cons ?x606 ?y)) (cons ?x606 (insort ?i ?y))) (insort ?i (cons ?x606 ?y)))
(=> rule13 (sort nil) nil)
(=> rule14 nil (sort nil))
(=> rule15 (sort (cons ?x607 ?y)) (insort ?x607 (sort ?y)))
(=> rule16 (insort ?x607 (sort ?y)) (sort (cons ?x607 ?y)))
(prove (forall ((l Lst)(x608 Nat)) (= (len (insort x608 l)) (succ (len l)))))
