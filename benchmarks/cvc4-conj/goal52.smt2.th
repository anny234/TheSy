(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun count (Nat Lst) Nat)
(declare-fun rev (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x370 ?__y371) (or (= ?__x370 ?__y371) (less ?__x370 ?__y371)))
(=> rule1 (or (= ?__x370 ?__y371) (less ?__x370 ?__y371)) (leq ?__x370 ?__y371))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x372 ?y) ?z) (cons ?x372 (append ?y ?z)))
(=> rule4 (cons ?x372 (append ?y ?z)) (append (cons ?x372 ?y) ?z))
(=> rule5 (count ?x373 nil) zero)
(=> rule6 (count ?x374 (cons ?y375 ?z)) (ite (= ?x374 ?y375) (succ (count ?x374 ?z)) (count ?x374 ?z)))
(=> rule7 (ite (= ?x374 ?y375) (succ (count ?x374 ?z)) (count ?x374 ?z)) (count ?x374 (cons ?y375 ?z)))
(=> rule8 (rev nil) nil)
(=> rule9 nil (rev nil))
(=> rule10 (rev (cons ?x376 ?y)) (append (rev ?y) (cons ?x376 nil)))
(=> rule11 (append (rev ?y) (cons ?x376 nil)) (rev (cons ?x376 ?y)))
(prove (forall ((l Lst)(n Nat)) (= (count n l) (count n (rev l)))))
