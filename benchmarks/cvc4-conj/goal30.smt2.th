(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun mem (Nat Lst) Bool)
(declare-fun insort (Nat Lst) Lst)
(declare-fun sort (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x113 ?__y114) (or (= ?__x113 ?__y114) (less ?__x113 ?__y114)))
(=> rule1 (or (= ?__x113 ?__y114) (less ?__x113 ?__y114)) (leq ?__x113 ?__y114))
(=> rule2 (less ?x115 zero) false)
(=> rule3 (less zero (succ ?x116)) true)
(=> rule4 (less (succ ?x117) (succ ?y118)) (less ?x117 ?y118))
(=> rule5 (less ?x117 ?y118) (less (succ ?x117) (succ ?y118)))
(=> rule6 (mem ?x119 nil) false)
(=> rule7 (mem ?x120 (cons ?y121 ?z)) (or (= ?x120 ?y121) (mem ?x120 ?z)))
(=> rule8 (or (= ?x120 ?y121) (mem ?x120 ?z)) (mem ?x120 (cons ?y121 ?z)))
(=> rule9 (insort ?i nil) (cons ?i nil))
(=> rule10 (cons ?i nil) (insort ?i nil))
(=> rule11 (insort ?i (cons ?x122 ?y)) (ite (less ?i ?x122) (cons ?i (cons ?x122 ?y)) (cons ?x122 (insort ?i ?y))))
(=> rule12 (ite (less ?i ?x122) (cons ?i (cons ?x122 ?y)) (cons ?x122 (insort ?i ?y))) (insort ?i (cons ?x122 ?y)))
(=> rule13 (sort nil) nil)
(=> rule14 nil (sort nil))
(=> rule15 (sort (cons ?x123 ?y)) (insort ?x123 (sort ?y)))
(=> rule16 (insort ?x123 (sort ?y)) (sort (cons ?x123 ?y)))
(prove (forall ((l Lst)(x124 Nat)) (= (mem x124 (insort x124 l)) true)))
