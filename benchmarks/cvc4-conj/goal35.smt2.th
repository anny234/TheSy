(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun P (Nat) Bool)
(declare-fun drop (Nat Lst) Lst)
(declare-fun dropWhile (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x535 ?__y536) (or (= ?__x535 ?__y536) (less ?__x535 ?__y536)))
(=> rule1 (or (= ?__x535 ?__y536) (less ?__x535 ?__y536)) (leq ?__x535 ?__y536))
(=> rule2 (drop ?x537 nil) nil)
(=> rule3 (drop zero ?x) ?x)
(=> rule4 (drop (succ ?x538) (cons ?y539 ?z)) (drop ?x538 ?z))
(=> rule5 (dropWhile nil) nil)
(=> rule6 nil (dropWhile nil))
(=> rule7 (dropWhile (cons ?x540 ?y)) (ite (P ?x540) (dropWhile ?y) (cons ?x540 ?y)))
(=> rule8 (ite (P ?x540) (dropWhile ?y) (cons ?x540 ?y)) (dropWhile (cons ?x540 ?y)))
(prove (forall ((xs Lst)) (= (=> (forall ((x541 Nat)) (not (P x541))) (= (dropWhile xs) xs)) true)))
