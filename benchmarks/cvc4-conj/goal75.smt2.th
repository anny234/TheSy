(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun rev (Lst) Lst)
(declare-fun filter (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x520 ?__y521) (or (= ?__x520 ?__y521) (less ?__x520 ?__y521)))
(=> rule1 (or (= ?__x520 ?__y521) (less ?__x520 ?__y521)) (leq ?__x520 ?__y521))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x522 ?y) ?z) (cons ?x522 (append ?y ?z)))
(=> rule4 (cons ?x522 (append ?y ?z)) (append (cons ?x522 ?y) ?z))
(=> rule5 (rev nil) nil)
(=> rule6 nil (rev nil))
(=> rule7 (rev (cons ?x523 ?y)) (append (rev ?y) (cons ?x523 nil)))
(=> rule8 (append (rev ?y) (cons ?x523 nil)) (rev (cons ?x523 ?y)))
(prove (forall ((xs Lst)) (= (rev (filter xs)) (filter (rev xs)))))
