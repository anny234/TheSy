(datatype Nat () ((succ Nat Nat) (zero Nat)))
(declare-fun plus (Nat Nat) Nat)
(declare-fun minus (Nat Nat) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x297 ?__y298) (or (= ?__x297 ?__y298) (less ?__x297 ?__y298)))
(=> rule1 (or (= ?__x297 ?__y298) (less ?__x297 ?__y298)) (leq ?__x297 ?__y298))
(=> rule2 (plus zero ?n) ?n)
(=> rule3 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule4 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(=> rule5 (minus zero ?n) zero)
(=> rule6 (minus ?n zero) ?n)
(=> rule7 (minus (succ ?n) (succ ?m)) (minus ?n ?m))
(=> rule8 (minus ?n ?m) (minus (succ ?n) (succ ?m)))
;(prove (forall ((k Nat)(i Nat)(j Nat)) (= (minus (minus i j) k) (minus i (plus j k)))))

(=|> minus_split (minus ?n ?m) (potential_split ?m zero (succ (skf ?m))) (?m zero) (?m (succ ?z)))
