(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun mem (Nat Lst) Bool)
(declare-fun ins1 (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x363 ?__y364) (or (= ?__x363 ?__y364) (less ?__x363 ?__y364)))
(=> rule1 (or (= ?__x363 ?__y364) (less ?__x363 ?__y364)) (leq ?__x363 ?__y364))
(=> rule2 (mem ?x365 nil) false)
(=> rule3 (mem ?x366 (cons ?y367 ?z)) (or (= ?x366 ?y367) (mem ?x366 ?z)))
(=> rule4 (or (= ?x366 ?y367) (mem ?x366 ?z)) (mem ?x366 (cons ?y367 ?z)))
(=> rule5 (ins1 ?i nil) (cons ?i nil))
(=> rule6 (cons ?i nil) (ins1 ?i nil))
(=> rule7 (ins1 ?i (cons ?x368 ?y)) (ite (= ?i ?x368) (cons ?x368 ?y) (cons ?x368 (ins1 ?i ?y))))
(=> rule8 (ite (= ?i ?x368) (cons ?x368 ?y) (cons ?x368 (ins1 ?i ?y))) (ins1 ?i (cons ?x368 ?y)))
(prove (forall ((l Lst)(x369 Nat)) (= (mem x369 (ins1 x369 l)) true)))
