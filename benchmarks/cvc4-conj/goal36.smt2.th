(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun P (Nat) Bool)
(declare-fun take (Nat Lst) Lst)
(declare-fun takeWhile (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x22 ?__y23) (or (= ?__x22 ?__y23) (less ?__x22 ?__y23)))
(=> rule1 (or (= ?__x22 ?__y23) (less ?__x22 ?__y23)) (leq ?__x22 ?__y23))
(=> rule2 (take ?x24 nil) nil)
(=> rule3 (take zero ?x) nil)
(=> rule4 (take (succ ?x25) (cons ?y26 ?z)) (cons ?y26 (take ?x25 ?z)))
(=> rule5 (cons ?y26 (take ?x25 ?z)) (take (succ ?x25) (cons ?y26 ?z)))
(=> rule6 (takeWhile nil) nil)
(=> rule7 nil (takeWhile nil))
(=> rule8 (takeWhile (cons ?x27 ?y)) (ite (P ?x27) (cons ?x27 (takeWhile ?y)) nil))
(=> rule9 (ite (P ?x27) (cons ?x27 (takeWhile ?y)) nil) (takeWhile (cons ?x27 ?y)))
(prove (forall ((xs Lst)) (= (=> (forall ((x28 Nat)) (P x28)) (= (takeWhile xs) xs)) true)))
