(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun mem (Nat Lst) Bool)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x139 ?__y140) (or (= ?__x139 ?__y140) (less ?__x139 ?__y140)))
(=> rule1 (or (= ?__x139 ?__y140) (less ?__x139 ?__y140)) (leq ?__x139 ?__y140))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x141 ?y) ?z) (cons ?x141 (append ?y ?z)))
(=> rule4 (cons ?x141 (append ?y ?z)) (append (cons ?x141 ?y) ?z))
(=> rule5 (mem ?x142 nil) false)
(=> rule6 (mem ?x143 (cons ?y144 ?z)) (or (= ?x143 ?y144) (mem ?x143 ?z)))
(=> rule7 (or (= ?x143 ?y144) (mem ?x143 ?z)) (mem ?x143 (cons ?y144 ?z)))
(prove (forall ((x145 Nat)(t Lst)(l Lst)) (= (=> (mem x145 l) (mem x145 (append l t))) true)))
