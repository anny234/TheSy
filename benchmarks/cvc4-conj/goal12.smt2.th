(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun f (Nat) Nat)
(declare-fun drop (Nat Lst) Lst)
(declare-fun lmap (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x291 ?__y292) (or (= ?__x291 ?__y292) (less ?__x291 ?__y292)))
(=> rule1 (or (= ?__x291 ?__y292) (less ?__x291 ?__y292)) (leq ?__x291 ?__y292))
(=> rule2 (drop ?x293 nil) nil)
(=> rule3 (drop zero ?x) ?x)
(=> rule4 (drop (succ ?x294) (cons ?y295 ?z)) (drop ?x294 ?z))
(=> rule5 (lmap nil) nil)
(=> rule6 nil (lmap nil))
(=> rule7 (lmap (cons ?x296 ?y)) (cons (f ?x296) (lmap ?y)))
(=> rule8 (cons (f ?x296) (lmap ?y)) (lmap (cons ?x296 ?y)))
(prove (forall ((xs Lst)(n Nat)) (= (drop n (lmap xs)) (lmap (drop n xs)))))
