(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun len (Lst) Nat)
(declare-fun insort (Nat Lst) Lst)
(declare-fun sort (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x39 ?__y40) (or (= ?__x39 ?__y40) (less ?__x39 ?__y40)))
(=> rule1 (or (= ?__x39 ?__y40) (less ?__x39 ?__y40)) (leq ?__x39 ?__y40))
(=> rule2 (less ?x41 zero) false)
(=> rule3 (less zero (succ ?x42)) true)
(=> rule4 (less (succ ?x43) (succ ?y44)) (less ?x43 ?y44))
(=> rule5 (less ?x43 ?y44) (less (succ ?x43) (succ ?y44)))
(=> rule6 (len nil) zero)
(=> rule7 zero (len nil))
(=> rule8 (len (cons ?x45 ?y)) (succ (len ?y)))
(=> rule9 (insort ?i nil) (cons ?i nil))
(=> rule10 (cons ?i nil) (insort ?i nil))
(=> rule11 (insort ?i (cons ?x46 ?y)) (ite (less ?i ?x46) (cons ?i (cons ?x46 ?y)) (cons ?x46 (insort ?i ?y))))
(=> rule12 (ite (less ?i ?x46) (cons ?i (cons ?x46 ?y)) (cons ?x46 (insort ?i ?y))) (insort ?i (cons ?x46 ?y)))
(=> rule13 (sort nil) nil)
(=> rule14 nil (sort nil))
(=> rule15 (sort (cons ?x47 ?y)) (insort ?x47 (sort ?y)))
(=> rule16 (insort ?x47 (sort ?y)) (sort (cons ?x47 ?y)))
(prove (forall ((l Lst)) (= (len (sort l)) (len l))))
