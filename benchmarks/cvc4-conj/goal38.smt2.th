(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun count (Nat Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x478 ?__y479) (or (= ?__x478 ?__y479) (less ?__x478 ?__y479)))
(=> rule1 (or (= ?__x478 ?__y479) (less ?__x478 ?__y479)) (leq ?__x478 ?__y479))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x480 ?y) ?z) (cons ?x480 (append ?y ?z)))
(=> rule4 (cons ?x480 (append ?y ?z)) (append (cons ?x480 ?y) ?z))
(=> rule5 (count ?x481 nil) zero)
(=> rule6 (count ?x482 (cons ?y483 ?z)) (ite (= ?x482 ?y483) (succ (count ?x482 ?z)) (count ?x482 ?z)))
(=> rule7 (ite (= ?x482 ?y483) (succ (count ?x482 ?z)) (count ?x482 ?z)) (count ?x482 (cons ?y483 ?z)))
(prove (forall ((x Lst)(n Nat)) (= (count n (append x (cons n nil))) (succ (count n x)))))
