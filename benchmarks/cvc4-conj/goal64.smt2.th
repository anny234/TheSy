(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun len (Lst) Nat)
(declare-fun drop (Nat Lst) Lst)
(declare-fun last (Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x397 ?__y398) (or (= ?__x397 ?__y398) (less ?__x397 ?__y398)))
(=> rule1 (or (= ?__x397 ?__y398) (less ?__x397 ?__y398)) (leq ?__x397 ?__y398))
(=> rule2 (less ?x399 zero) false)
(=> rule3 (less zero (succ ?x400)) true)
(=> rule4 (less (succ ?x401) (succ ?y402)) (less ?x401 ?y402))
(=> rule5 (less ?x401 ?y402) (less (succ ?x401) (succ ?y402)))
(=> rule6 (len nil) zero)
(=> rule7 zero (len nil))
(=> rule8 (len (cons ?x403 ?y)) (succ (len ?y)))
(=> rule9 (drop ?x404 nil) nil)
(=> rule10 (drop zero ?x) ?x)
(=> rule11 (drop (succ ?x405) (cons ?y406 ?z)) (drop ?x405 ?z))
(=> rule12 (last (cons ?x407 ?y)) (ite (= ?y nil) ?x407 (last ?y)))
(=> rule13 (ite (= ?y nil) ?x407 (last ?y)) (last (cons ?x407 ?y)))
(prove (forall ((xs Lst)(n Nat)) (= (=> (less n (len xs)) (= (last (drop n xs)) (last xs))) true)))
