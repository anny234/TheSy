(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun take (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x609 ?__y610) (or (= ?__x609 ?__y610) (less ?__x609 ?__y610)))
(=> rule1 (or (= ?__x609 ?__y610) (less ?__x609 ?__y610)) (leq ?__x609 ?__y610))
(=> rule2 (take ?x611 nil) nil)
(=> rule3 (take zero ?x) nil)
(=> rule4 (take (succ ?x612) (cons ?y613 ?z)) (cons ?y613 (take ?x612 ?z)))
(=> rule5 (cons ?y613 (take ?x612 ?z)) (take (succ ?x612) (cons ?y613 ?z)))
(prove (forall ((xs Lst)(n Nat)(x614 Nat)) (= (take (succ n) (cons x614 xs)) (cons x614 (take n xs)))))
