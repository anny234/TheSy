(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Tree () ((node Nat Tree Tree Tree) (leaf Tree)))
(declare-fun less (Nat Nat) Bool)
(declare-fun nmax (Nat Nat) Nat)
(declare-fun mirror (Tree) Tree)
(declare-fun height (Tree) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x168 ?__y169) (or (= ?__x168 ?__y169) (less ?__x168 ?__y169)))
(=> rule1 (or (= ?__x168 ?__y169) (less ?__x168 ?__y169)) (leq ?__x168 ?__y169))
(=> rule2 (less ?x170 zero) false)
(=> rule3 (less zero (succ ?x171)) true)
(=> rule4 (less (succ ?x172) (succ ?y173)) (less ?x172 ?y173))
(=> rule5 (less ?x172 ?y173) (less (succ ?x172) (succ ?y173)))
(=> rule6 (nmax ?n ?m) (ite (less ?n ?m) ?m ?n))
(=> rule7 (ite (less ?n ?m) ?m ?n) (nmax ?n ?m))
(=> rule8 (mirror leaf) leaf)
(=> rule9 leaf (mirror leaf))
(=> rule10 (mirror (node ?x174 ?y175 ?z176)) (node ?x174 (mirror ?z176) (mirror ?y175)))
(=> rule11 (node ?x174 (mirror ?z176) (mirror ?y175)) (mirror (node ?x174 ?y175 ?z176)))
(=> rule12 (height leaf) zero)
(=> rule13 zero (height leaf))
(=> rule14 (height (node ?x177 ?y178 ?z179)) (succ (nmax (height ?y178) (height ?z179))))
(prove (forall ((a Tree)) (= (height (mirror a)) (height a))))
