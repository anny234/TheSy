(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun mem (Nat Lst) Bool)
(declare-fun insort (Nat Lst) Lst)
(declare-fun sort (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x259 ?__y260) (or (= ?__x259 ?__y260) (less ?__x259 ?__y260)))
(=> rule1 (or (= ?__x259 ?__y260) (less ?__x259 ?__y260)) (leq ?__x259 ?__y260))
(=> rule2 (less ?x261 zero) false)
(=> rule3 (less zero (succ ?x262)) true)
(=> rule4 (less (succ ?x263) (succ ?y264)) (less ?x263 ?y264))
(=> rule5 (less ?x263 ?y264) (less (succ ?x263) (succ ?y264)))
(=> rule6 (mem ?x265 nil) false)
(=> rule7 (mem ?x266 (cons ?y267 ?z)) (or (= ?x266 ?y267) (mem ?x266 ?z)))
(=> rule8 (or (= ?x266 ?y267) (mem ?x266 ?z)) (mem ?x266 (cons ?y267 ?z)))
(=> rule9 (insort ?i nil) (cons ?i nil))
(=> rule10 (cons ?i nil) (insort ?i nil))
(=> rule11 (insort ?i (cons ?x268 ?y)) (ite (less ?i ?x268) (cons ?i (cons ?x268 ?y)) (cons ?x268 (insort ?i ?y))))
(=> rule12 (ite (less ?i ?x268) (cons ?i (cons ?x268 ?y)) (cons ?x268 (insort ?i ?y))) (insort ?i (cons ?x268 ?y)))
(=> rule13 (sort nil) nil)
(=> rule14 nil (sort nil))
(=> rule15 (sort (cons ?x269 ?y)) (insort ?x269 (sort ?y)))
(=> rule16 (insort ?x269 (sort ?y)) (sort (cons ?x269 ?y)))
(prove (forall ((l Lst)(x270 Nat)(y271 Nat)) (= (=> (not (= x270 y271)) (= (mem x270 (insort y271 l)) (mem x270 l))) true)))
