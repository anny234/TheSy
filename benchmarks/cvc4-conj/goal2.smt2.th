(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun plus (Nat Nat) Nat)
(declare-fun append (Lst Lst) Lst)
(declare-fun count (Nat Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x572 ?__y573) (or (= ?__x572 ?__y573) (less ?__x572 ?__y573)))
(=> rule1 (or (= ?__x572 ?__y573) (less ?__x572 ?__y573)) (leq ?__x572 ?__y573))
(=> rule2 (plus zero ?n) ?n)
(=> rule3 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule4 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(=> rule5 (append nil ?x) ?x)
(=> rule6 (append (cons ?x574 ?y) ?z) (cons ?x574 (append ?y ?z)))
(=> rule7 (cons ?x574 (append ?y ?z)) (append (cons ?x574 ?y) ?z))
(=> rule8 (count ?x575 nil) zero)
(=> rule9 (count ?x576 (cons ?y577 ?z)) (ite (= ?x576 ?y577) (succ (count ?x576 ?z)) (count ?x576 ?z)))
(=> rule10 (ite (= ?x576 ?y577) (succ (count ?x576 ?z)) (count ?x576 ?z)) (count ?x576 (cons ?y577 ?z)))
(=> eq_refl (= ?x ?x) true)
;(prove (forall ((l Lst)(n Nat)(m578 Lst)) (= (plus (count n l) (count n m578)) (count n (append l m578)))))

(=|> count_split (count ?x (cons ?y ?z)) (potential_split (= ?x ?y) true false) (?x (count ?zz ?yy)))

