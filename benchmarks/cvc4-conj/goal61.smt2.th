(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun last (Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x29 ?__y30) (or (= ?__x29 ?__y30) (less ?__x29 ?__y30)))
(=> rule1 (or (= ?__x29 ?__y30) (less ?__x29 ?__y30)) (leq ?__x29 ?__y30))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x31 ?y) ?z) (cons ?x31 (append ?y ?z)))
(=> rule4 (cons ?x31 (append ?y ?z)) (append (cons ?x31 ?y) ?z))
(=> rule5 (last (cons ?x32 ?y)) (ite (= ?y nil) ?x32 (last ?y)))
(=> rule6 (ite (= ?y nil) ?x32 (last ?y)) (last (cons ?x32 ?y)))
(prove (forall ((xs Lst)(ys Lst)) (= (=> (not (= ys nil)) (= (last (append xs ys)) (last ys))) true)))
