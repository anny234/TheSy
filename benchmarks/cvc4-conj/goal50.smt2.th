(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun minus (Nat Nat) Nat)
(declare-fun len (Lst) Nat)
(declare-fun take (Nat Lst) Lst)
(declare-fun last (Lst) Nat)
(declare-fun butlast (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x189 ?__y190) (or (= ?__x189 ?__y190) (less ?__x189 ?__y190)))
(=> rule1 (or (= ?__x189 ?__y190) (less ?__x189 ?__y190)) (leq ?__x189 ?__y190))
(=> rule2 (minus zero ?n) zero)
(=> rule3 (minus ?n zero) ?n)
(=> rule4 (minus (succ ?n) (succ ?m)) (minus ?n ?m))
(=> rule5 (minus ?n ?m) (minus (succ ?n) (succ ?m)))
(=> rule6 (len nil) zero)
(=> rule7 zero (len nil))
(=> rule8 (len (cons ?x191 ?y)) (succ (len ?y)))
(=> rule9 (take ?x192 nil) nil)
(=> rule10 (take zero ?x) nil)
(=> rule11 (take (succ ?x193) (cons ?y194 ?z)) (cons ?y194 (take ?x193 ?z)))
(=> rule12 (cons ?y194 (take ?x193 ?z)) (take (succ ?x193) (cons ?y194 ?z)))
(=> rule13 (last (cons ?x195 ?y)) (ite (= ?y nil) ?x195 (last ?y)))
(=> rule14 (ite (= ?y nil) ?x195 (last ?y)) (last (cons ?x195 ?y)))
(=> rule15 (butlast nil) nil)
(=> rule16 nil (butlast nil))
(=> rule17 (butlast (cons ?x196 ?y)) (ite (= ?y nil) nil (cons ?x196 (butlast ?y))))
(=> rule18 (ite (= ?y nil) nil (cons ?x196 (butlast ?y))) (butlast (cons ?x196 ?y)))
(prove (forall ((xs Lst)) (= (butlast xs) (take (minus (len xs) (succ zero)) xs))))
