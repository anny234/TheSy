(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun take (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x87 ?__y88) (or (= ?__x87 ?__y88) (less ?__x87 ?__y88)))
(=> rule1 (or (= ?__x87 ?__y88) (less ?__x87 ?__y88)) (leq ?__x87 ?__y88))
(=> rule2 (take ?x89 nil) nil)
(=> rule3 (take zero ?x) nil)
(=> rule4 (take (succ ?x90) (cons ?y91 ?z)) (cons ?y91 (take ?x90 ?z)))
(=> rule5 (cons ?y91 (take ?x90 ?z)) (take (succ ?x90) (cons ?y91 ?z)))
(prove (forall ((xs Lst)) (= (take zero xs) nil)))
