(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun zip (Lst Lst) ZLst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x180 ?__y181) (or (= ?__x180 ?__y181) (less ?__x180 ?__y181)))
(=> rule1 (or (= ?__x180 ?__y181) (less ?__x180 ?__y181)) (leq ?__x180 ?__y181))
(=> rule2 (zip nil ?x) znil)
(=> rule3 (zip ?x nil) znil)
(=> rule4 (zip (cons ?x182 ?y) (cons ?z183 ?w)) (zcons (mkpair ?x182 ?z183) (zip ?y ?w)))
(=> rule5 (zcons (mkpair ?x182 ?z183) (zip ?y ?w)) (zip (cons ?x182 ?y) (cons ?z183 ?w)))
(prove (forall ((ys Lst)) (= (zip nil ys) znil)))
