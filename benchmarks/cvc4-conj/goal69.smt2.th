(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun len (Lst) Nat)
(declare-fun delete (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x318 ?__y319) (or (= ?__x318 ?__y319) (less ?__x318 ?__y319)))
(=> rule1 (or (= ?__x318 ?__y319) (less ?__x318 ?__y319)) (leq ?__x318 ?__y319))
(=> rule2 (less ?x320 zero) false)
(=> rule3 (less zero (succ ?x321)) true)
(=> rule4 (less (succ ?x322) (succ ?y323)) (less ?x322 ?y323))
(=> rule5 (less ?x322 ?y323) (less (succ ?x322) (succ ?y323)))
(=> rule6 (len nil) zero)
(=> rule7 zero (len nil))
(=> rule8 (len (cons ?x324 ?y)) (succ (len ?y)))
(=> rule9 (delete ?x325 nil) nil)
(=> rule10 (delete ?x326 (cons ?y327 ?z)) (ite (= ?x326 ?y327) (delete ?x326 ?z) (cons ?y327 (delete ?x326 ?z))))
(=> rule11 (ite (= ?x326 ?y327) (delete ?x326 ?z) (cons ?y327 (delete ?x326 ?z))) (delete ?x326 (cons ?y327 ?z)))
(prove (forall ((l Lst)(x328 Nat)) (= (or (= (len (delete x328 l)) (len l)) (less (len (delete x328 l)) (len l))) true)))
