(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun count (Nat Lst) Nat)
(declare-fun insort (Nat Lst) Lst)
(declare-fun sort (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x299 ?__y300) (or (= ?__x299 ?__y300) (less ?__x299 ?__y300)))
(=> rule1 (or (= ?__x299 ?__y300) (less ?__x299 ?__y300)) (leq ?__x299 ?__y300))
(=> rule2 (less ?x301 zero) false)
(=> rule3 (less zero (succ ?x302)) true)
(=> rule4 (less (succ ?x303) (succ ?y304)) (less ?x303 ?y304))
(=> rule5 (less ?x303 ?y304) (less (succ ?x303) (succ ?y304)))
(=> rule6 (count ?x305 nil) zero)
(=> rule7 (count ?x306 (cons ?y307 ?z)) (ite (= ?x306 ?y307) (succ (count ?x306 ?z)) (count ?x306 ?z)))
(=> rule8 (ite (= ?x306 ?y307) (succ (count ?x306 ?z)) (count ?x306 ?z)) (count ?x306 (cons ?y307 ?z)))
(=> rule9 (insort ?i nil) (cons ?i nil))
(=> rule10 (cons ?i nil) (insort ?i nil))
(=> rule11 (insort ?i (cons ?x308 ?y)) (ite (less ?i ?x308) (cons ?i (cons ?x308 ?y)) (cons ?x308 (insort ?i ?y))))
(=> rule12 (ite (less ?i ?x308) (cons ?i (cons ?x308 ?y)) (cons ?x308 (insort ?i ?y))) (insort ?i (cons ?x308 ?y)))
(=> rule13 (sort nil) nil)
(=> rule14 nil (sort nil))
(=> rule15 (sort (cons ?x309 ?y)) (insort ?x309 (sort ?y)))
(=> rule16 (insort ?x309 (sort ?y)) (sort (cons ?x309 ?y)))
(prove (forall ((l Lst)(x310 Nat)) (= (count x310 l) (count x310 (sort l)))))
