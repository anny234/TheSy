(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun mem (Nat Lst) Bool)
(declare-fun insort (Nat Lst) Lst)
(declare-fun sort (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x408 ?__y409) (or (= ?__x408 ?__y409) (less ?__x408 ?__y409)))
(=> rule1 (or (= ?__x408 ?__y409) (less ?__x408 ?__y409)) (leq ?__x408 ?__y409))
(=> rule2 (less ?x410 zero) false)
(=> rule3 (less zero (succ ?x411)) true)
(=> rule4 (less (succ ?x412) (succ ?y413)) (less ?x412 ?y413))
(=> rule5 (less ?x412 ?y413) (less (succ ?x412) (succ ?y413)))
(=> rule6 (mem ?x414 nil) false)
(=> rule7 (mem ?x415 (cons ?y416 ?z)) (or (= ?x415 ?y416) (mem ?x415 ?z)))
(=> rule8 (or (= ?x415 ?y416) (mem ?x415 ?z)) (mem ?x415 (cons ?y416 ?z)))
(=> rule9 (insort ?i nil) (cons ?i nil))
(=> rule10 (cons ?i nil) (insort ?i nil))
(=> rule11 (insort ?i (cons ?x417 ?y)) (ite (less ?i ?x417) (cons ?i (cons ?x417 ?y)) (cons ?x417 (insort ?i ?y))))
(=> rule12 (ite (less ?i ?x417) (cons ?i (cons ?x417 ?y)) (cons ?x417 (insort ?i ?y))) (insort ?i (cons ?x417 ?y)))
(=> rule13 (sort nil) nil)
(=> rule14 nil (sort nil))
(=> rule15 (sort (cons ?x418 ?y)) (insort ?x418 (sort ?y)))
(=> rule16 (insort ?x418 (sort ?y)) (sort (cons ?x418 ?y)))
(prove (forall ((x419 Nat)(y420 Nat)(l Lst)) (= (=> (less x419 y420) (= (mem x419 (insort y420 l)) (mem x419 l))) true)))
