(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun count (Nat Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x33 ?__y34) (or (= ?__x33 ?__y34) (less ?__x33 ?__y34)))
(=> rule1 (or (= ?__x33 ?__y34) (less ?__x33 ?__y34)) (leq ?__x33 ?__y34))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x35 ?y) ?z) (cons ?x35 (append ?y ?z)))
(=> rule4 (cons ?x35 (append ?y ?z)) (append (cons ?x35 ?y) ?z))
(=> rule5 (count ?x36 nil) zero)
(=> rule6 (count ?x37 (cons ?y38 ?z)) (ite (= ?x37 ?y38) (succ (count ?x37 ?z)) (count ?x37 ?z)))
(=> rule7 (ite (= ?x37 ?y38) (succ (count ?x37 ?z)) (count ?x37 ?z)) (count ?x37 (cons ?y38 ?z)))
(prove (forall ((h Nat)(x Lst)(n Nat)) (= (=> (not (= n h)) (= (count n (append x (cons h nil))) (count n x))) true)))
