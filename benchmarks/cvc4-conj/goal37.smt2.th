(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun mem (Nat Lst) Bool)
(declare-fun delete (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x78 ?__y79) (or (= ?__x78 ?__y79) (less ?__x78 ?__y79)))
(=> rule1 (or (= ?__x78 ?__y79) (less ?__x78 ?__y79)) (leq ?__x78 ?__y79))
(=> rule2 (mem ?x80 nil) false)
(=> rule3 (mem ?x81 (cons ?y82 ?z)) (or (= ?x81 ?y82) (mem ?x81 ?z)))
(=> rule4 (or (= ?x81 ?y82) (mem ?x81 ?z)) (mem ?x81 (cons ?y82 ?z)))
(=> rule5 (delete ?x83 nil) nil)
(=> rule6 (delete ?x84 (cons ?y85 ?z)) (ite (= ?x84 ?y85) (delete ?x84 ?z) (cons ?y85 (delete ?x84 ?z))))
(=> rule7 (ite (= ?x84 ?y85) (delete ?x84 ?z) (cons ?y85 (delete ?x84 ?z))) (delete ?x84 (cons ?y85 ?z)))
(prove (forall ((x86 Nat)(l Lst)) (= (not (mem x86 (delete x86 l))) true)))
