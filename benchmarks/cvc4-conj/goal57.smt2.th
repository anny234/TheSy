(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun plus (Nat Nat) Nat)
(declare-fun drop (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x7 ?__y8) (or (= ?__x7 ?__y8) (less ?__x7 ?__y8)))
(=> rule1 (or (= ?__x7 ?__y8) (less ?__x7 ?__y8)) (leq ?__x7 ?__y8))
(=> rule2 (plus zero ?n) ?n)
(=> rule3 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule4 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(=> rule5 (drop ?x9 nil) nil)
(=> rule6 (drop zero ?x) ?x)
(=> rule7 (drop (succ ?x10) (cons ?y11 ?z)) (drop ?x10 ?z))
(prove (forall ((xs Lst)(m Nat)(n Nat)) (= (drop n (drop m xs)) (drop (plus n m) xs))))
