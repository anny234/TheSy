(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(datatype Pair () ((mkpair Nat Nat Pair)))
(datatype ZLst () ((zcons Pair ZLst ZLst) (znil ZLst)))
(declare-fun drop (Nat Lst) Lst)
(declare-fun zip (Lst Lst) ZLst)
(declare-fun zdrop (Nat ZLst) ZLst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x501 ?__y502) (or (= ?__x501 ?__y502) (less ?__x501 ?__y502)))
(=> rule1 (or (= ?__x501 ?__y502) (less ?__x501 ?__y502)) (leq ?__x501 ?__y502))
(=> rule2 (drop ?x503 nil) nil)
(=> rule3 (drop zero ?x) ?x)
(=> rule4 (drop (succ ?x504) (cons ?y505 ?z)) (drop ?x504 ?z))
(=> rule5 (zip nil ?x) znil)
(=> rule6 (zip ?x nil) znil)
(=> rule7 (zip (cons ?x506 ?y) (cons ?z507 ?w)) (zcons (mkpair ?x506 ?z507) (zip ?y ?w)))
(=> rule8 (zcons (mkpair ?x506 ?z507) (zip ?y ?w)) (zip (cons ?x506 ?y) (cons ?z507 ?w)))
(=> rule9 (zdrop ?x508 znil) znil)
(=> rule10 (zdrop zero ?x509) ?x509)
(=> rule11 (zdrop (succ ?x510) (zcons ?y511 ?z512)) (zdrop ?x510 ?z512))
(prove (forall ((xs Lst)(ys Lst)(n Nat)) (= (zdrop n (zip xs ys)) (zip (drop n xs) (drop n ys)))))
