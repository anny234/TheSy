(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun f (Nat) Nat)
(declare-fun take (Nat Lst) Lst)
(declare-fun lmap (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x16 ?__y17) (or (= ?__x16 ?__y17) (less ?__x16 ?__y17)))
(=> rule1 (or (= ?__x16 ?__y17) (less ?__x16 ?__y17)) (leq ?__x16 ?__y17))
(=> rule2 (take ?x18 nil) nil)
(=> rule3 (take zero ?x) nil)
(=> rule4 (take (succ ?x19) (cons ?y20 ?z)) (cons ?y20 (take ?x19 ?z)))
(=> rule5 (cons ?y20 (take ?x19 ?z)) (take (succ ?x19) (cons ?y20 ?z)))
(=> rule6 (lmap nil) nil)
(=> rule7 nil (lmap nil))
(=> rule8 (lmap (cons ?x21 ?y)) (cons (f ?x21) (lmap ?y)))
(=> rule9 (cons (f ?x21) (lmap ?y)) (lmap (cons ?x21 ?y)))
(prove (forall ((xs Lst)(n Nat)) (= (take n (lmap xs)) (lmap (take n xs)))))
